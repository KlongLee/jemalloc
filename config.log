This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by configure, which was
generated by GNU Autoconf 2.71.  Invocation command line was

  $ ./configure --enable-debug

## --------- ##
## Platform. ##
## --------- ##

hostname = DESKTOP-GD8DKTR
uname -m = x86_64
uname -r = 3.2.0-340.x86_64
uname -s = MINGW64_NT-10.0-19043
uname -v = 2021-08-02 16:30 UTC

/usr/bin/uname -p = unknown
/bin/uname -X     = unknown

/bin/arch              = x86_64
/usr/bin/arch -k       = unknown
/usr/convex/getsysinfo = unknown
/usr/bin/hostinfo      = unknown
/bin/machine           = unknown
/usr/bin/oslevel       = unknown
/bin/universe          = unknown

PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/Extensions/Microsoft/IntelliCode/CLI/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.28.29910/bin/HostX64/x64/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/VC/VCPackages/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/CommonExtensions/Microsoft/TestWindow/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/CommonExtensions/Microsoft/TeamFoundation/Team Explorer/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/MSBuild/Current/bin/Roslyn/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/Team Tools/Performance Tools/x64/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/Team Tools/Performance Tools/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/Shared/Common/VSPerfCollectionTools/vs2019/x64/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/Shared/Common/VSPerfCollectionTools/vs2019/
PATH: /c/Program Files (x86)/Microsoft SDKs/Windows/v10.0A/bin/NETFX 4.8 Tools/x64/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/CommonExtensions/Microsoft/FSharp/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/Tools/devinit/
PATH: /c/Program Files (x86)/Windows Kits/10/bin/10.0.19041.0/x64/
PATH: /c/Program Files (x86)/Windows Kits/10/bin/x64/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/MSBuild/Current/Bin/
PATH: /c/Windows/Microsoft.NET/Framework64/v4.0.30319/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/Tools/
PATH: /mingw64/bin/
PATH: /usr/bin/
PATH: /mingw64/bin/
PATH: /usr/bin/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/Extensions/Microsoft/IntelliCode/CLI/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.28.29910/bin/HostX64/x64/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/VC/VCPackages/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/CommonExtensions/Microsoft/TestWindow/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/CommonExtensions/Microsoft/TeamFoundation/Team Explorer/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/MSBuild/Current/bin/Roslyn/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/Team Tools/Performance Tools/x64/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/Team Tools/Performance Tools/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/Shared/Common/VSPerfCollectionTools/vs2019/x64/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/Shared/Common/VSPerfCollectionTools/vs2019/
PATH: /c/Program Files (x86)/Microsoft SDKs/Windows/v10.0A/bin/NETFX 4.8 Tools/x64/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/CommonExtensions/Microsoft/FSharp/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/Tools/devinit/
PATH: /c/Program Files (x86)/Windows Kits/10/bin/10.0.19041.0/x64/
PATH: /c/Program Files (x86)/Windows Kits/10/bin/x64/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/MSBuild/Current/Bin/
PATH: /c/Windows/Microsoft.NET/Framework64/v4.0.30319/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/Tools/
PATH: /c/Program Files (x86)/Common Files/Intel/Shared Libraries/redist/intel64/compiler/
PATH: /c/Python39/Scripts/
PATH: /c/Users/lilse/anaconda3/
PATH: /c/Windows/system32/
PATH: /c/Windows/
PATH: /c/Windows/System32/Wbem/
PATH: /c/Windows/System32/WindowsPowerShell/v1.0/
PATH: /c/Windows/System32/OpenSSH/
PATH: /c/Program Files (x86)/Intel/Intel(R) Management Engine Components/DAL/
PATH: /c/Program Files/Intel/Intel(R) Management Engine Components/DAL/
PATH: /c/Program Files/Docker/Docker/resources/bin/
PATH: /c/ProgramData/DockerDesktop/version-bin/
PATH: /c/ProgramData/chocolatey/bin/
PATH: /c/terraform/
PATH: /c/ProgramData/chocolatey/lib/pulumi/tools/Pulumi/bin/
PATH: /c/pulumi/
PATH: /c/nginx/
PATH: /c/Program Files/PuTTY/
PATH: /c/jdk-15.0.1/bin/
PATH: /c/Program Files/nodejs/
PATH: /c/sonarscanner/bin/
PATH: /c/jq/
PATH: /c/flutter/bin/
PATH: /c/mysql-8.0.23-winx64/bin/
PATH: /c/lein/
PATH: /c/vcpkg/
PATH: /c/openssl-1.1.1j-win64-mingw/
PATH: /c/cmake-3.20.0-rc4-windows-x86_64/bin/
PATH: /c/Program Files/LLVM/bin/
PATH: /c/rust-analyzer/
PATH: /c/ffmpeg-av1/
PATH: /c/Program Files/3T Software Labs/Studio 3T/
PATH: /c/oanda-ta/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2017/BuildTools/VC/Tools/MSVC/14.16.27023/bin/Hostx64/x64/
PATH: /c/automake/bin/
PATH: /c/Program Files/dotnet/
PATH: /c/kustomise/
PATH: /c/Program Files/Git/cmd/
PATH: /c/Program Files (x86)/GnuPG/bin/
PATH: /c/protoc-3.17.3-win64/bin/
PATH: /c/operator-sdk/
PATH: /c/Program Files/Go/bin/
PATH: /c/Users/lilse/.wasmer/bin/
PATH: /c/Users/lilse/.wasmer/globals/wapm_packages/.bin/
PATH: /c/skaffold/
PATH: /c/MinGW/bin/
PATH: /c/Program Files/MySQL/MySQL Shell 8.0/bin/
PATH: /c/Users/lilse/.cargo/bin/
PATH: /c/Users/lilse/AppData/Local/Microsoft/WindowsApps/
PATH: /c/Users/lilse/go/bin/
PATH: /c/Users/lilse/AppData/Local/Programs/Microsoft VS Code/bin/
PATH: /c/Program Files/JetBrains/IntelliJ IDEA 2020.2.3/bin/
PATH: /c/Users/lilse/AppData/Local/Google/Cloud SDK/google-cloud-sdk/bin/
PATH: /c/Users/lilse/.deno/bin/
PATH: /c/Program Files/GPAC/
PATH: /c/Users/lilse/AppData/Roaming/npm/
PATH: /c/Users/lilse/AppData/Local/atom/bin/
PATH: /c/Users/lilse/.dotnet/tools/
PATH: /c/Program Files (x86)/Nmap/
PATH: /c/Program Files (x86)/GitHub CLI/
PATH: /c/Program Files (x86)/GnuPG/bin/
PATH: /c/Users/lilse/go/bin/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/Ninja/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/VC/Linux/bin/ConnectionManagerExe  /
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/Ninja/
PATH: /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/VC/Linux/bin/ConnectionManagerExe/


## ----------- ##
## Core tests. ##
## ----------- ##

configure:2450: loading site script /usr/local/etc/config.site
| # This file is in public domain.
| # Original author: Karlson2k (Evgeny Grin)
| # Written for MSys2 to help running 'configure' scripts
| 
| # Use correct config.site file even if CONFIG_SITE is not set
| if test -r /etc/config.site; then
|   . /etc/config.site
| fi
config.site:13: default build_alias set to 
config.site:20: default prefix set to 
configure:3025: looking for aux files: install-sh config.guess config.sub
configure:3038:  trying ./build-aux/
configure:3049:   ./build-aux/install-sh found
configure:3067:   ./build-aux/config.guess found
configure:3067:   ./build-aux/config.sub found
configure:3247: checking for xsltproc
configure:3270: found /usr/bin/xsltproc
configure:3283: result: /usr/bin/xsltproc
configure:3382: checking for gcc
configure:3417: result: no
configure:3485: checking for cc
configure:3537: result: no
configure:3598: checking for cl.exe
configure:3619: found /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.28.29910/bin/HostX64/x64/cl.exe
configure:3630: result: cl.exe
configure:3767: checking for C compiler version
configure:3776: cl.exe --version >&5
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '--version'
cl : Command line error D8003 : missing source filename
configure:3787: $? = 2
configure:3776: cl.exe -v >&5
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-v'
cl : Command line error D8003 : missing source filename
configure:3787: $? = 2
configure:3776: cl.exe -V >&5
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line error D8004 : '/V' requires an argument
configure:3787: $? = 2
configure:3776: cl.exe -qversion >&5
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-qversion'
cl : Command line error D8003 : missing source filename
configure:3787: $? = 2
configure:3776: cl.exe -version >&5
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-version'
cl : Command line error D8003 : missing source filename
configure:3787: $? = 2
configure:3807: checking whether the C compiler works
configure:3829: cl.exe    conftest.c  >&5
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
Microsoft (R) Incremental Linker Version 14.28.29914.0
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
conftest.obj 
configure:3833: $? = 0
configure:3883: result: yes
configure:3886: checking for C compiler default output file name
configure:3888: result: conftest.exe
configure:3894: checking for suffix of executables
configure:3901: cl.exe -o conftest.exe    conftest.c  >&5
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
conftest.c
Microsoft (R) Incremental Linker Version 14.28.29914.0
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
configure:3905: $? = 0
configure:3928: result: .exe
configure:3950: checking whether we are cross compiling
configure:3958: cl.exe -o conftest.exe    conftest.c  >&5
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
conftest.c
Microsoft (R) Incremental Linker Version 14.28.29914.0
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
configure:3962: $? = 0
configure:3969: ./conftest.exe
configure:3973: $? = 0
configure:3988: result: no
configure:3993: checking for suffix of object files
configure:4016: cl.exe -c   conftest.c >&5
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
configure:4020: $? = 0
configure:4042: result: obj
configure:4046: checking whether the compiler supports GNU C
configure:4066: cl.exe -c   conftest.c >&5
conftest.c
conftest.c(14): error C2065: 'choke': undeclared identifier
conftest.c(14): error C2146: syntax error: missing ';' before identifier 'me'
conftest.c(17): error C2065: 'me': undeclared identifier
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

configure:4066: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| #ifndef __GNUC__
|        choke me
| #endif
| 
|   ;
|   return 0;
| }
configure:4076: result: no
configure:4087: checking whether cl.exe accepts -g
configure:4108: cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:4108: $? = 0
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| 
|   ;
|   return 0;
| }
configure:4124: cl.exe -c   conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

configure:4124: $? = 0
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| 
|   ;
|   return 0;
| }
configure:4141: cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:4141: $? = 0
configure:4152: result: yes
configure:4172: checking for cl.exe option to enable C11 features
configure:4187: cl.exe  -c   conftest.c >&5
conftest.c
conftest.c(14): fatal error C1189: #error:  "Compiler does not advertise C89 conformance"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

configure:4187: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| // Does the compiler advertise C99 conformance?
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 199901L
| # error "Compiler does not advertise C99 conformance"
| #endif
| 
| #include <stdbool.h>
| extern int puts (const char *);
| extern int printf (const char *, ...);
| extern int dprintf (int, const char *, ...);
| extern void *malloc (size_t);
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| // dprintf is used instead of fprintf to avoid needing to declare
| // FILE and stderr.
| #define debug(...) dprintf (2, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   #error "your preprocessor is broken"
| #endif
| #if BIG_OK
| #else
|   #error "your preprocessor is broken"
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // See if C++-style comments work.
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static bool
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str = "";
|   int number = 0;
|   float fnumber = 0;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| 
|   return *str && number && fnumber;
| }
| 
| 
| // Does the compiler advertise C11 conformance?
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 201112L
| # error "Compiler does not advertise C11 conformance"
| #endif
| 
| // Check _Alignas.
| char _Alignas (double) aligned_as_double;
| char _Alignas (0) no_special_alignment;
| extern char aligned_as_int;
| char _Alignas (0) _Alignas (int) aligned_as_int;
| 
| // Check _Alignof.
| enum
| {
|   int_alignment = _Alignof (int),
|   int_array_alignment = _Alignof (int[100]),
|   char_alignment = _Alignof (char)
| };
| _Static_assert (0 < -_Alignof (int), "_Alignof is signed");
| 
| // Check _Noreturn.
| int _Noreturn does_not_return (void) { for (;;) continue; }
| 
| // Check _Static_assert.
| struct test_static_assert
| {
|   int x;
|   _Static_assert (sizeof (int) <= sizeof (long int),
|                   "_Static_assert does not work in struct");
|   long int y;
| };
| 
| // Check UTF-8 literals.
| #define u8 syntax error!
| char const utf8_literal[] = u8"happens to be ASCII" "another string";
| 
| // Check duplicate typedefs.
| typedef long *long_ptr;
| typedef long int *long_ptr;
| typedef long_ptr long_ptr;
| 
| // Anonymous structures and unions -- taken from C11 6.7.2.1 Example 1.
| struct anonymous
| {
|   union {
|     struct { int i; int j; };
|     struct { int k; long int l; } w;
|   };
|   int m;
| } v1;
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   
|   // Check bool.
|   _Bool success = false;
|   success |= (argc != 0);
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   success &= test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[0] = argv[0][0];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   ok |= (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	 || dynamic_array[ni.number - 1] != 543);
| 
|   
|   _Static_assert ((offsetof (struct anonymous, i)
| 		   == offsetof (struct anonymous, w.k)),
| 		  "Anonymous union alignment botch");
|   v1.i = 2;
|   v1.w.k = 5;
|   ok |= v1.i != 5;
| 
|   return ok;
| }
| 
configure:4187: cl.exe -std=gnu11 -c   conftest.c >&5
conftest.c
conftest.c(14): fatal error C1189: #error:  "Compiler does not advertise C89 conformance"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-std=gnu11'
configure:4187: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| // Does the compiler advertise C99 conformance?
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 199901L
| # error "Compiler does not advertise C99 conformance"
| #endif
| 
| #include <stdbool.h>
| extern int puts (const char *);
| extern int printf (const char *, ...);
| extern int dprintf (int, const char *, ...);
| extern void *malloc (size_t);
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| // dprintf is used instead of fprintf to avoid needing to declare
| // FILE and stderr.
| #define debug(...) dprintf (2, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   #error "your preprocessor is broken"
| #endif
| #if BIG_OK
| #else
|   #error "your preprocessor is broken"
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // See if C++-style comments work.
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static bool
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str = "";
|   int number = 0;
|   float fnumber = 0;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| 
|   return *str && number && fnumber;
| }
| 
| 
| // Does the compiler advertise C11 conformance?
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 201112L
| # error "Compiler does not advertise C11 conformance"
| #endif
| 
| // Check _Alignas.
| char _Alignas (double) aligned_as_double;
| char _Alignas (0) no_special_alignment;
| extern char aligned_as_int;
| char _Alignas (0) _Alignas (int) aligned_as_int;
| 
| // Check _Alignof.
| enum
| {
|   int_alignment = _Alignof (int),
|   int_array_alignment = _Alignof (int[100]),
|   char_alignment = _Alignof (char)
| };
| _Static_assert (0 < -_Alignof (int), "_Alignof is signed");
| 
| // Check _Noreturn.
| int _Noreturn does_not_return (void) { for (;;) continue; }
| 
| // Check _Static_assert.
| struct test_static_assert
| {
|   int x;
|   _Static_assert (sizeof (int) <= sizeof (long int),
|                   "_Static_assert does not work in struct");
|   long int y;
| };
| 
| // Check UTF-8 literals.
| #define u8 syntax error!
| char const utf8_literal[] = u8"happens to be ASCII" "another string";
| 
| // Check duplicate typedefs.
| typedef long *long_ptr;
| typedef long int *long_ptr;
| typedef long_ptr long_ptr;
| 
| // Anonymous structures and unions -- taken from C11 6.7.2.1 Example 1.
| struct anonymous
| {
|   union {
|     struct { int i; int j; };
|     struct { int k; long int l; } w;
|   };
|   int m;
| } v1;
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   
|   // Check bool.
|   _Bool success = false;
|   success |= (argc != 0);
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   success &= test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[0] = argv[0][0];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   ok |= (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	 || dynamic_array[ni.number - 1] != 543);
| 
|   
|   _Static_assert ((offsetof (struct anonymous, i)
| 		   == offsetof (struct anonymous, w.k)),
| 		  "Anonymous union alignment botch");
|   v1.i = 2;
|   v1.w.k = 5;
|   ok |= v1.i != 5;
| 
|   return ok;
| }
| 
configure:4200: result: unsupported
configure:4218: checking for cl.exe option to enable C99 features
configure:4233: cl.exe  -c   conftest.c >&5
conftest.c
conftest.c(14): fatal error C1189: #error:  "Compiler does not advertise C89 conformance"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

configure:4233: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| // Does the compiler advertise C99 conformance?
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 199901L
| # error "Compiler does not advertise C99 conformance"
| #endif
| 
| #include <stdbool.h>
| extern int puts (const char *);
| extern int printf (const char *, ...);
| extern int dprintf (int, const char *, ...);
| extern void *malloc (size_t);
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| // dprintf is used instead of fprintf to avoid needing to declare
| // FILE and stderr.
| #define debug(...) dprintf (2, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   #error "your preprocessor is broken"
| #endif
| #if BIG_OK
| #else
|   #error "your preprocessor is broken"
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // See if C++-style comments work.
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static bool
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str = "";
|   int number = 0;
|   float fnumber = 0;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| 
|   return *str && number && fnumber;
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   
|   // Check bool.
|   _Bool success = false;
|   success |= (argc != 0);
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   success &= test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[0] = argv[0][0];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   ok |= (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	 || dynamic_array[ni.number - 1] != 543);
| 
|   return ok;
| }
| 
configure:4233: cl.exe -std=gnu99 -c   conftest.c >&5
conftest.c
conftest.c(14): fatal error C1189: #error:  "Compiler does not advertise C89 conformance"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-std=gnu99'
configure:4233: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| // Does the compiler advertise C99 conformance?
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 199901L
| # error "Compiler does not advertise C99 conformance"
| #endif
| 
| #include <stdbool.h>
| extern int puts (const char *);
| extern int printf (const char *, ...);
| extern int dprintf (int, const char *, ...);
| extern void *malloc (size_t);
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| // dprintf is used instead of fprintf to avoid needing to declare
| // FILE and stderr.
| #define debug(...) dprintf (2, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   #error "your preprocessor is broken"
| #endif
| #if BIG_OK
| #else
|   #error "your preprocessor is broken"
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // See if C++-style comments work.
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static bool
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str = "";
|   int number = 0;
|   float fnumber = 0;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| 
|   return *str && number && fnumber;
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   
|   // Check bool.
|   _Bool success = false;
|   success |= (argc != 0);
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   success &= test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[0] = argv[0][0];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   ok |= (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	 || dynamic_array[ni.number - 1] != 543);
| 
|   return ok;
| }
| 
configure:4233: cl.exe -std=c99 -c   conftest.c >&5
conftest.c
conftest.c(14): fatal error C1189: #error:  "Compiler does not advertise C89 conformance"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-std=c99'
configure:4233: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| // Does the compiler advertise C99 conformance?
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 199901L
| # error "Compiler does not advertise C99 conformance"
| #endif
| 
| #include <stdbool.h>
| extern int puts (const char *);
| extern int printf (const char *, ...);
| extern int dprintf (int, const char *, ...);
| extern void *malloc (size_t);
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| // dprintf is used instead of fprintf to avoid needing to declare
| // FILE and stderr.
| #define debug(...) dprintf (2, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   #error "your preprocessor is broken"
| #endif
| #if BIG_OK
| #else
|   #error "your preprocessor is broken"
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // See if C++-style comments work.
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static bool
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str = "";
|   int number = 0;
|   float fnumber = 0;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| 
|   return *str && number && fnumber;
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   
|   // Check bool.
|   _Bool success = false;
|   success |= (argc != 0);
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   success &= test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[0] = argv[0][0];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   ok |= (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	 || dynamic_array[ni.number - 1] != 543);
| 
|   return ok;
| }
| 
configure:4233: cl.exe -c99 -c   conftest.c >&5
conftest.c
conftest.c(14): fatal error C1189: #error:  "Compiler does not advertise C89 conformance"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-c99'
configure:4233: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| // Does the compiler advertise C99 conformance?
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 199901L
| # error "Compiler does not advertise C99 conformance"
| #endif
| 
| #include <stdbool.h>
| extern int puts (const char *);
| extern int printf (const char *, ...);
| extern int dprintf (int, const char *, ...);
| extern void *malloc (size_t);
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| // dprintf is used instead of fprintf to avoid needing to declare
| // FILE and stderr.
| #define debug(...) dprintf (2, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   #error "your preprocessor is broken"
| #endif
| #if BIG_OK
| #else
|   #error "your preprocessor is broken"
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // See if C++-style comments work.
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static bool
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str = "";
|   int number = 0;
|   float fnumber = 0;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| 
|   return *str && number && fnumber;
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   
|   // Check bool.
|   _Bool success = false;
|   success |= (argc != 0);
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   success &= test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[0] = argv[0][0];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   ok |= (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	 || dynamic_array[ni.number - 1] != 543);
| 
|   return ok;
| }
| 
configure:4233: cl.exe -qlanglvl=extc1x -c   conftest.c >&5
conftest.c
conftest.c(14): fatal error C1189: #error:  "Compiler does not advertise C89 conformance"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-qlanglvl=extc1x'
configure:4233: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| // Does the compiler advertise C99 conformance?
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 199901L
| # error "Compiler does not advertise C99 conformance"
| #endif
| 
| #include <stdbool.h>
| extern int puts (const char *);
| extern int printf (const char *, ...);
| extern int dprintf (int, const char *, ...);
| extern void *malloc (size_t);
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| // dprintf is used instead of fprintf to avoid needing to declare
| // FILE and stderr.
| #define debug(...) dprintf (2, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   #error "your preprocessor is broken"
| #endif
| #if BIG_OK
| #else
|   #error "your preprocessor is broken"
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // See if C++-style comments work.
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static bool
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str = "";
|   int number = 0;
|   float fnumber = 0;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| 
|   return *str && number && fnumber;
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   
|   // Check bool.
|   _Bool success = false;
|   success |= (argc != 0);
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   success &= test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[0] = argv[0][0];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   ok |= (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	 || dynamic_array[ni.number - 1] != 543);
| 
|   return ok;
| }
| 
configure:4233: cl.exe -qlanglvl=extc99 -c   conftest.c >&5
conftest.c
conftest.c(14): fatal error C1189: #error:  "Compiler does not advertise C89 conformance"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-qlanglvl=extc99'
configure:4233: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| // Does the compiler advertise C99 conformance?
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 199901L
| # error "Compiler does not advertise C99 conformance"
| #endif
| 
| #include <stdbool.h>
| extern int puts (const char *);
| extern int printf (const char *, ...);
| extern int dprintf (int, const char *, ...);
| extern void *malloc (size_t);
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| // dprintf is used instead of fprintf to avoid needing to declare
| // FILE and stderr.
| #define debug(...) dprintf (2, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   #error "your preprocessor is broken"
| #endif
| #if BIG_OK
| #else
|   #error "your preprocessor is broken"
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // See if C++-style comments work.
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static bool
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str = "";
|   int number = 0;
|   float fnumber = 0;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| 
|   return *str && number && fnumber;
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   
|   // Check bool.
|   _Bool success = false;
|   success |= (argc != 0);
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   success &= test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[0] = argv[0][0];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   ok |= (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	 || dynamic_array[ni.number - 1] != 543);
| 
|   return ok;
| }
| 
configure:4233: cl.exe -AC99 -c   conftest.c >&5
conftest.c
conftest.c(14): fatal error C1189: #error:  "Compiler does not advertise C89 conformance"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-AC99'
configure:4233: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| // Does the compiler advertise C99 conformance?
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 199901L
| # error "Compiler does not advertise C99 conformance"
| #endif
| 
| #include <stdbool.h>
| extern int puts (const char *);
| extern int printf (const char *, ...);
| extern int dprintf (int, const char *, ...);
| extern void *malloc (size_t);
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| // dprintf is used instead of fprintf to avoid needing to declare
| // FILE and stderr.
| #define debug(...) dprintf (2, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   #error "your preprocessor is broken"
| #endif
| #if BIG_OK
| #else
|   #error "your preprocessor is broken"
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // See if C++-style comments work.
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static bool
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str = "";
|   int number = 0;
|   float fnumber = 0;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| 
|   return *str && number && fnumber;
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   
|   // Check bool.
|   _Bool success = false;
|   success |= (argc != 0);
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   success &= test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[0] = argv[0][0];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   ok |= (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	 || dynamic_array[ni.number - 1] != 543);
| 
|   return ok;
| }
| 
configure:4233: cl.exe -D_STDC_C99= -c   conftest.c >&5
conftest.c
conftest.c(14): fatal error C1189: #error:  "Compiler does not advertise C89 conformance"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

configure:4233: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| // Does the compiler advertise C99 conformance?
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 199901L
| # error "Compiler does not advertise C99 conformance"
| #endif
| 
| #include <stdbool.h>
| extern int puts (const char *);
| extern int printf (const char *, ...);
| extern int dprintf (int, const char *, ...);
| extern void *malloc (size_t);
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| // dprintf is used instead of fprintf to avoid needing to declare
| // FILE and stderr.
| #define debug(...) dprintf (2, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   #error "your preprocessor is broken"
| #endif
| #if BIG_OK
| #else
|   #error "your preprocessor is broken"
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // See if C++-style comments work.
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static bool
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str = "";
|   int number = 0;
|   float fnumber = 0;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| 
|   return *str && number && fnumber;
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   
|   // Check bool.
|   _Bool success = false;
|   success |= (argc != 0);
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   success &= test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[0] = argv[0][0];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   ok |= (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	 || dynamic_array[ni.number - 1] != 543);
| 
|   return ok;
| }
| 
configure:4246: result: unsupported
configure:4264: checking for cl.exe option to enable C89 features
configure:4279: cl.exe  -c   conftest.c >&5
conftest.c
conftest.c(14): fatal error C1189: #error:  "Compiler does not advertise C89 conformance"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

configure:4279: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   return ok;
| }
| 
configure:4279: cl.exe -qlanglvl=extc89 -c   conftest.c >&5
conftest.c
conftest.c(14): fatal error C1189: #error:  "Compiler does not advertise C89 conformance"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-qlanglvl=extc89'
configure:4279: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   return ok;
| }
| 
configure:4279: cl.exe -qlanglvl=ansi -c   conftest.c >&5
conftest.c
conftest.c(14): fatal error C1189: #error:  "Compiler does not advertise C89 conformance"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-qlanglvl=ansi'
configure:4279: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   return ok;
| }
| 
configure:4279: cl.exe -std -c   conftest.c >&5
conftest.c
conftest.c(14): fatal error C1189: #error:  "Compiler does not advertise C89 conformance"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-std'
configure:4279: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   return ok;
| }
| 
configure:4279: cl.exe -Ae -c   conftest.c >&5
conftest.c
conftest.c(14): fatal error C1189: #error:  "Compiler does not advertise C89 conformance"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-Ae'
configure:4279: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   return ok;
| }
| 
configure:4279: cl.exe -Aa -D_HPUX_SOURCE -c   conftest.c >&5
conftest.c
conftest.c(14): fatal error C1189: #error:  "Compiler does not advertise C89 conformance"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-Aa'
configure:4279: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   return ok;
| }
| 
configure:4279: cl.exe -Xc -D__EXTENSIONS__ -c   conftest.c >&5
conftest.c
conftest.c(14): fatal error C1189: #error:  "Compiler does not advertise C89 conformance"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-Xc'
configure:4279: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   return ok;
| }
| 
configure:4292: result: unsupported
configure:4318: checking whether compiler is MSVC
configure:4339: cl.exe -c   conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

configure:4339: $? = 0
configure:4347: result: yes
configure:4362: checking whether compiler is cray
configure:4383: cl.exe -c   conftest.c >&5
conftest.c
conftest.c(15): error C2143: syntax error: missing ';' before '-'
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

configure:4383: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| 
| #ifndef _CRAYC
|   int fail-1;
| #endif
| 
|   ;
|   return 0;
| }
configure:4391: result: no
configure:5221: checking whether compiler supports -Zi
configure:5252: cl.exe -nologo -c -Zi  conftest.c >&5
conftest.c
configure:5252: $? = 0
configure:5255: result: yes
configure:5273: checking whether compiler supports -MT
configure:5304: cl.exe -nologo -c -Zi -MT  conftest.c >&5
conftest.c
configure:5304: $? = 0
configure:5307: result: yes
configure:5325: checking whether compiler supports -W3
configure:5356: cl.exe -nologo -c -Zi -MT -W3  conftest.c >&5
conftest.c
configure:5356: $? = 0
configure:5359: result: yes
configure:5377: checking whether compiler supports -FS
configure:5408: cl.exe -nologo -c -Zi -MT -W3 -FS  conftest.c >&5
conftest.c
configure:5408: $? = 0
configure:5411: result: yes
configure:5657: checking how to run the C preprocessor
configure:5683: cl.exe -nologo -E -I./include/msvc_compat conftest.c
conftest.c
configure:5683: $? = 0
configure:5698: cl.exe -nologo -E -I./include/msvc_compat conftest.c
conftest.c
conftest.c(9): fatal error C1083: Cannot open include file: 'ac_nonexistent.h': No such file or directory
configure:5698: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:5725: result: cl.exe -nologo -E
configure:5739: cl.exe -nologo -E -I./include/msvc_compat conftest.c
conftest.c
configure:5739: $? = 0
configure:5754: cl.exe -nologo -E -I./include/msvc_compat conftest.c
conftest.c
conftest.c(9): fatal error C1083: Cannot open include file: 'ac_nonexistent.h': No such file or directory
configure:5754: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:5938: checking for g++
configure:5973: result: no
configure:5938: checking for c++
configure:5973: result: no
configure:5938: checking for gpp
configure:5973: result: no
configure:5938: checking for aCC
configure:5973: result: no
configure:5938: checking for CC
configure:5973: result: no
configure:5938: checking for cxx
configure:5973: result: no
configure:5938: checking for cc++
configure:5973: result: no
configure:5938: checking for cl.exe
configure:5959: found /c/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.28.29910/bin/HostX64/x64/cl.exe
configure:5970: result: cl.exe
configure:5997: checking for C++ compiler version
configure:6006: cl.exe --version >&5
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '--version'
cl : Command line error D8003 : missing source filename
configure:6017: $? = 2
configure:6006: cl.exe -v >&5
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-v'
cl : Command line error D8003 : missing source filename
configure:6017: $? = 2
configure:6006: cl.exe -V >&5
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line error D8004 : '/V' requires an argument
configure:6017: $? = 2
configure:6006: cl.exe -qversion >&5
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-qversion'
cl : Command line error D8003 : missing source filename
configure:6017: $? = 2
configure:6021: checking whether the compiler supports GNU C++
configure:6041: cl.exe -c  -I./include/msvc_compat conftest.cpp >&5
conftest.cpp
conftest.cpp(14): error C2065: 'choke': undeclared identifier
conftest.cpp(14): error C2146: syntax error: missing ';' before identifier 'me'
conftest.cpp(14): error C2065: 'me': undeclared identifier
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

configure:6041: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| #ifndef __GNUC__
|        choke me
| #endif
| 
|   ;
|   return 0;
| }
configure:6051: result: no
configure:6062: checking whether cl.exe accepts -g
configure:6083: cl.exe -c -g -I./include/msvc_compat conftest.cpp >&5
conftest.cpp
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:6083: $? = 0
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| 
|   ;
|   return 0;
| }
configure:6099: cl.exe -c  -I./include/msvc_compat conftest.cpp >&5
conftest.cpp
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

configure:6099: $? = 0
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| 
|   ;
|   return 0;
| }
configure:6116: cl.exe -c -g -I./include/msvc_compat conftest.cpp >&5
conftest.cpp
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:6116: $? = 0
configure:6127: result: yes
configure:6147: checking for cl.exe option to enable C++11 features
configure:6162: cl.exe  -c -g -I./include/msvc_compat conftest.cpp >&5
conftest.cpp
conftest.cpp(34): warning C4530: C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc
conftest.cpp(55): fatal error C1189: #error:  "Compiler does not advertise C++11 conformance"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:6162: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| 
| // Does the compiler advertise C++ 2011 conformance?
| #if !defined __cplusplus || __cplusplus < 201103L
| # error "Compiler does not advertise C++11 conformance"
| #endif
| 
| namespace cxx11test
| {
|   constexpr int get_val() { return 20; }
| 
|   struct testinit
|   {
|     int i;
|     double d;
|   };
| 
|   class delegate
|   {
|   public:
|     delegate(int n) : n(n) {}
|     delegate(): delegate(2354) {}
| 
|     virtual int getval() { return this->n; };
|   protected:
|     int n;
|   };
| 
|   class overridden : public delegate
|   {
|   public:
|     overridden(int n): delegate(n) {}
|     virtual int getval() override final { return this->n * 2; }
|   };
| 
|   class nocopy
|   {
|   public:
|     nocopy(int i): i(i) {}
|     nocopy() = default;
|     nocopy(const nocopy&) = delete;
|     nocopy & operator=(const nocopy&) = delete;
|   private:
|     int i;
|   };
| 
|   // for testing lambda expressions
|   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
|   {
|     return f(v);
|   }
| 
|   // for testing variadic templates and trailing return types
|   template <typename V> auto sum(V first) -> V
|   {
|     return first;
|   }
|   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
|   {
|     return first + sum(rest...);
|   }
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   
| {
|   // Test auto and decltype
|   auto a1 = 6538;
|   auto a2 = 48573953.4;
|   auto a3 = "String literal";
| 
|   int total = 0;
|   for (auto i = a3; *i; ++i) { total += *i; }
| 
|   decltype(a2) a4 = 34895.034;
| }
| {
|   // Test constexpr
|   short sa[cxx11test::get_val()] = { 0 };
| }
| {
|   // Test initializer lists
|   cxx11test::testinit il = { 4323, 435234.23544 };
| }
| {
|   // Test range-based for
|   int array[] = {9, 7, 13, 15, 4, 18, 12, 10, 5, 3,
|                  14, 19, 17, 8, 6, 20, 16, 2, 11, 1};
|   for (auto &x : array) { x += 23; }
| }
| {
|   // Test lambda expressions
|   using cxx11test::eval;
|   assert (eval ([](int x) { return x*2; }, 21) == 42);
|   double d = 2.0;
|   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
|   assert (d == 5.0);
|   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
|   assert (d == 5.0);
| }
| {
|   // Test use of variadic templates
|   using cxx11test::sum;
|   auto a = sum(1);
|   auto b = sum(1, 2);
|   auto c = sum(1.0, 2.0, 3.0);
| }
| {
|   // Test constructor delegation
|   cxx11test::delegate d1;
|   cxx11test::delegate d2();
|   cxx11test::delegate d3(45);
| }
| {
|   // Test override and final
|   cxx11test::overridden o1(55464);
| }
| {
|   // Test nullptr
|   char *c = nullptr;
| }
| {
|   // Test template brackets
|   test_template<::test_template<int>> v(test_template<int>(12));
| }
| {
|   // Unicode literals
|   char const *utf8 = u8"UTF-8 string \u2500";
|   char16_t const *utf16 = u"UTF-8 string \u2500";
|   char32_t const *utf32 = U"UTF-32 string \u2500";
| }
| 
|   return ok;
| }
| 
configure:6180: result: none needed
configure:6259: checking whether cl.exe supports C++17 features with -std=c++17
configure:7056: cl.exe -std=c++17 -c -g -I./include/msvc_compat conftest.cpp >&5
conftest.cpp
conftest.cpp(20): fatal error C1189: #error:  "This is not a C++11 compiler"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-std=c++17'
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:7056: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++17, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201703L
| 
| #error "This is not a C++17 compiler"
| 
| #else
| 
| #include <initializer_list>
| #include <utility>
| #include <type_traits>
| 
| namespace cxx17
| {
| 
|   namespace test_constexpr_lambdas
|   {
| 
|     constexpr int foo = [](){return 42;}();
| 
|   }
| 
|   namespace test::nested_namespace::definitions
|   {
| 
|   }
| 
|   namespace test_fold_expression
|   {
| 
|     template<typename... Args>
|     int multiply(Args... args)
|     {
|       return (args * ... * 1);
|     }
| 
|     template<typename... Args>
|     bool all(Args... args)
|     {
|       return (args && ...);
|     }
| 
|   }
| 
|   namespace test_extended_static_assert
|   {
| 
|     static_assert (true);
| 
|   }
| 
|   namespace test_auto_brace_init_list
|   {
| 
|     auto foo = {5};
|     auto bar {5};
| 
|     static_assert(std::is_same<std::initializer_list<int>, decltype(foo)>::value);
|     static_assert(std::is_same<int, decltype(bar)>::value);
|   }
| 
|   namespace test_typename_in_template_template_parameter
|   {
| 
|     template<template<typename> typename X> struct D;
| 
|   }
| 
|   namespace test_fallthrough_nodiscard_maybe_unused_attributes
|   {
| 
|     int f1()
|     {
|       return 42;
|     }
| 
|     [[nodiscard]] int f2()
|     {
|       [[maybe_unused]] auto unused = f1();
| 
|       switch (f1())
|       {
|       case 17:
|         f1();
|         [[fallthrough]];
|       case 42:
|         f1();
|       }
|       return f1();
|     }
| 
|   }
| 
|   namespace test_extended_aggregate_initialization
|   {
| 
|     struct base1
|     {
|       int b1, b2 = 42;
|     };
| 
|     struct base2
|     {
|       base2() {
|         b3 = 42;
|       }
|       int b3;
|     };
| 
|     struct derived : base1, base2
|     {
|         int d;
|     };
| 
|     derived d1 {{1, 2}, {}, 4};  // full initialization
|     derived d2 {{}, {}, 4};      // value-initialized bases
| 
|   }
| 
|   namespace test_general_range_based_for_loop
|   {
| 
|     struct iter
|     {
|       int i;
| 
|       int& operator* ()
|       {
|         return i;
|       }
| 
|       const int& operator* () const
|       {
|         return i;
|       }
| 
|       iter& operator++()
|       {
|         ++i;
|         return *this;
|       }
|     };
| 
|     struct sentinel
|     {
|       int i;
|     };
| 
|     bool operator== (const iter& i, const sentinel& s)
|     {
|       return i.i == s.i;
|     }
| 
|     bool operator!= (const iter& i, const sentinel& s)
|     {
|       return !(i == s);
|     }
| 
|     struct range
|     {
|       iter begin() const
|       {
|         return {0};
|       }
| 
|       sentinel end() const
|       {
|         return {5};
|       }
|     };
| 
|     void f()
|     {
|       range r {};
| 
|       for (auto i : r)
|       {
|         [[maybe_unused]] auto v = i;
|       }
|     }
| 
|   }
| 
|   namespace test_lambda_capture_asterisk_this_by_value
|   {
| 
|     struct t
|     {
|       int i;
|       int foo()
|       {
|         return [*this]()
|         {
|           return i;
|         }();
|       }
|     };
| 
|   }
| 
|   namespace test_enum_class_construction
|   {
| 
|     enum class byte : unsigned char
|     {};
| 
|     byte foo {42};
| 
|   }
| 
|   namespace test_constexpr_if
|   {
| 
|     template <bool cond>
|     int f ()
|     {
|       if constexpr(cond)
|       {
|         return 13;
|       }
|       else
|       {
|         return 42;
|       }
|     }
| 
|   }
| 
|   namespace test_selection_statement_with_initializer
|   {
| 
|     int f()
|     {
|       return 13;
|     }
| 
|     int f2()
|     {
|       if (auto i = f(); i > 0)
|       {
|         return 3;
|       }
| 
|       switch (auto i = f(); i + 4)
|       {
|       case 17:
|         return 2;
| 
|       default:
|         return 1;
|       }
|     }
| 
|   }
| 
|   namespace test_template_argument_deduction_for_class_templates
|   {
| 
|     template <typename T1, typename T2>
|     struct pair
|     {
|       pair (T1 p1, T2 p2)
|         : m1 {p1},
|           m2 {p2}
|       {}
| 
|       T1 m1;
|       T2 m2;
|     };
| 
|     void f()
|     {
|       [[maybe_unused]] auto p = pair{13, 42u};
|     }
| 
|   }
| 
|   namespace test_non_type_auto_template_parameters
|   {
| 
|     template <auto n>
|     struct B
|     {};
| 
|     B<5> b1;
|     B<'a'> b2;
| 
|   }
| 
|   namespace test_structured_bindings
|   {
| 
|     int arr[2] = { 1, 2 };
|     std::pair<int, int> pr = { 1, 2 };
| 
|     auto f1() -> int(&)[2]
|     {
|       return arr;
|     }
| 
|     auto f2() -> std::pair<int, int>&
|     {
|       return pr;
|     }
| 
|     struct S
|     {
|       int x1 : 2;
|       volatile double y1;
|     };
| 
|     S f3()
|     {
|       return {};
|     }
| 
|     auto [ x1, y1 ] = f1();
|     auto& [ xr1, yr1 ] = f1();
|     auto [ x2, y2 ] = f2();
|     auto& [ xr2, yr2 ] = f2();
|     const auto [ x3, y3 ] = f3();
| 
|   }
| 
|   namespace test_exception_spec_type_system
|   {
| 
|     struct Good {};
|     struct Bad {};
| 
|     void g1() noexcept;
|     void g2();
| 
|     template<typename T>
|     Bad
|     f(T*, T*);
| 
|     template<typename T1, typename T2>
|     Good
|     f(T1*, T2*);
| 
|     static_assert (std::is_same_v<Good, decltype(f(g1, g2))>);
| 
|   }
| 
|   namespace test_inline_variables
|   {
| 
|     template<class T> void f(T)
|     {}
| 
|     template<class T> inline T g(T)
|     {
|       return T{};
|     }
| 
|     template<> inline void f<>(int)
|     {}
| 
|     template<> int g<>(int)
|     {
|       return 5;
|     }
| 
|   }
| 
| }  // namespace cxx17
| 
| #endif  // __cplusplus < 201703L
| 
| 
| 
configure:7066: result: no
configure:6259: checking whether cl.exe supports C++17 features with +std=c++17
configure:7056: cl.exe +std=c++17 -c -g -I./include/msvc_compat conftest.cpp >&5
conftest.cpp
conftest.cpp(20): fatal error C1189: #error:  "This is not a C++11 compiler"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9024 : unrecognized source file type '+std=c++17', object file assumed
cl : Command line warning D9027 : source file '+std=c++17' ignored
configure:7056: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++17, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201703L
| 
| #error "This is not a C++17 compiler"
| 
| #else
| 
| #include <initializer_list>
| #include <utility>
| #include <type_traits>
| 
| namespace cxx17
| {
| 
|   namespace test_constexpr_lambdas
|   {
| 
|     constexpr int foo = [](){return 42;}();
| 
|   }
| 
|   namespace test::nested_namespace::definitions
|   {
| 
|   }
| 
|   namespace test_fold_expression
|   {
| 
|     template<typename... Args>
|     int multiply(Args... args)
|     {
|       return (args * ... * 1);
|     }
| 
|     template<typename... Args>
|     bool all(Args... args)
|     {
|       return (args && ...);
|     }
| 
|   }
| 
|   namespace test_extended_static_assert
|   {
| 
|     static_assert (true);
| 
|   }
| 
|   namespace test_auto_brace_init_list
|   {
| 
|     auto foo = {5};
|     auto bar {5};
| 
|     static_assert(std::is_same<std::initializer_list<int>, decltype(foo)>::value);
|     static_assert(std::is_same<int, decltype(bar)>::value);
|   }
| 
|   namespace test_typename_in_template_template_parameter
|   {
| 
|     template<template<typename> typename X> struct D;
| 
|   }
| 
|   namespace test_fallthrough_nodiscard_maybe_unused_attributes
|   {
| 
|     int f1()
|     {
|       return 42;
|     }
| 
|     [[nodiscard]] int f2()
|     {
|       [[maybe_unused]] auto unused = f1();
| 
|       switch (f1())
|       {
|       case 17:
|         f1();
|         [[fallthrough]];
|       case 42:
|         f1();
|       }
|       return f1();
|     }
| 
|   }
| 
|   namespace test_extended_aggregate_initialization
|   {
| 
|     struct base1
|     {
|       int b1, b2 = 42;
|     };
| 
|     struct base2
|     {
|       base2() {
|         b3 = 42;
|       }
|       int b3;
|     };
| 
|     struct derived : base1, base2
|     {
|         int d;
|     };
| 
|     derived d1 {{1, 2}, {}, 4};  // full initialization
|     derived d2 {{}, {}, 4};      // value-initialized bases
| 
|   }
| 
|   namespace test_general_range_based_for_loop
|   {
| 
|     struct iter
|     {
|       int i;
| 
|       int& operator* ()
|       {
|         return i;
|       }
| 
|       const int& operator* () const
|       {
|         return i;
|       }
| 
|       iter& operator++()
|       {
|         ++i;
|         return *this;
|       }
|     };
| 
|     struct sentinel
|     {
|       int i;
|     };
| 
|     bool operator== (const iter& i, const sentinel& s)
|     {
|       return i.i == s.i;
|     }
| 
|     bool operator!= (const iter& i, const sentinel& s)
|     {
|       return !(i == s);
|     }
| 
|     struct range
|     {
|       iter begin() const
|       {
|         return {0};
|       }
| 
|       sentinel end() const
|       {
|         return {5};
|       }
|     };
| 
|     void f()
|     {
|       range r {};
| 
|       for (auto i : r)
|       {
|         [[maybe_unused]] auto v = i;
|       }
|     }
| 
|   }
| 
|   namespace test_lambda_capture_asterisk_this_by_value
|   {
| 
|     struct t
|     {
|       int i;
|       int foo()
|       {
|         return [*this]()
|         {
|           return i;
|         }();
|       }
|     };
| 
|   }
| 
|   namespace test_enum_class_construction
|   {
| 
|     enum class byte : unsigned char
|     {};
| 
|     byte foo {42};
| 
|   }
| 
|   namespace test_constexpr_if
|   {
| 
|     template <bool cond>
|     int f ()
|     {
|       if constexpr(cond)
|       {
|         return 13;
|       }
|       else
|       {
|         return 42;
|       }
|     }
| 
|   }
| 
|   namespace test_selection_statement_with_initializer
|   {
| 
|     int f()
|     {
|       return 13;
|     }
| 
|     int f2()
|     {
|       if (auto i = f(); i > 0)
|       {
|         return 3;
|       }
| 
|       switch (auto i = f(); i + 4)
|       {
|       case 17:
|         return 2;
| 
|       default:
|         return 1;
|       }
|     }
| 
|   }
| 
|   namespace test_template_argument_deduction_for_class_templates
|   {
| 
|     template <typename T1, typename T2>
|     struct pair
|     {
|       pair (T1 p1, T2 p2)
|         : m1 {p1},
|           m2 {p2}
|       {}
| 
|       T1 m1;
|       T2 m2;
|     };
| 
|     void f()
|     {
|       [[maybe_unused]] auto p = pair{13, 42u};
|     }
| 
|   }
| 
|   namespace test_non_type_auto_template_parameters
|   {
| 
|     template <auto n>
|     struct B
|     {};
| 
|     B<5> b1;
|     B<'a'> b2;
| 
|   }
| 
|   namespace test_structured_bindings
|   {
| 
|     int arr[2] = { 1, 2 };
|     std::pair<int, int> pr = { 1, 2 };
| 
|     auto f1() -> int(&)[2]
|     {
|       return arr;
|     }
| 
|     auto f2() -> std::pair<int, int>&
|     {
|       return pr;
|     }
| 
|     struct S
|     {
|       int x1 : 2;
|       volatile double y1;
|     };
| 
|     S f3()
|     {
|       return {};
|     }
| 
|     auto [ x1, y1 ] = f1();
|     auto& [ xr1, yr1 ] = f1();
|     auto [ x2, y2 ] = f2();
|     auto& [ xr2, yr2 ] = f2();
|     const auto [ x3, y3 ] = f3();
| 
|   }
| 
|   namespace test_exception_spec_type_system
|   {
| 
|     struct Good {};
|     struct Bad {};
| 
|     void g1() noexcept;
|     void g2();
| 
|     template<typename T>
|     Bad
|     f(T*, T*);
| 
|     template<typename T1, typename T2>
|     Good
|     f(T1*, T2*);
| 
|     static_assert (std::is_same_v<Good, decltype(f(g1, g2))>);
| 
|   }
| 
|   namespace test_inline_variables
|   {
| 
|     template<class T> void f(T)
|     {}
| 
|     template<class T> inline T g(T)
|     {
|       return T{};
|     }
| 
|     template<> inline void f<>(int)
|     {}
| 
|     template<> int g<>(int)
|     {
|       return 5;
|     }
| 
|   }
| 
| }  // namespace cxx17
| 
| #endif  // __cplusplus < 201703L
| 
| 
| 
configure:7066: result: no
configure:6259: checking whether cl.exe supports C++17 features with -h std=c++17
configure:7056: cl.exe -h std=c++17 -c -g -I./include/msvc_compat conftest.cpp >&5
conftest.cpp
conftest.cpp(20): fatal error C1189: #error:  "This is not a C++11 compiler"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-h'
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9024 : unrecognized source file type 'std=c++17', object file assumed
cl : Command line warning D9027 : source file 'std=c++17' ignored
configure:7056: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++17, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201703L
| 
| #error "This is not a C++17 compiler"
| 
| #else
| 
| #include <initializer_list>
| #include <utility>
| #include <type_traits>
| 
| namespace cxx17
| {
| 
|   namespace test_constexpr_lambdas
|   {
| 
|     constexpr int foo = [](){return 42;}();
| 
|   }
| 
|   namespace test::nested_namespace::definitions
|   {
| 
|   }
| 
|   namespace test_fold_expression
|   {
| 
|     template<typename... Args>
|     int multiply(Args... args)
|     {
|       return (args * ... * 1);
|     }
| 
|     template<typename... Args>
|     bool all(Args... args)
|     {
|       return (args && ...);
|     }
| 
|   }
| 
|   namespace test_extended_static_assert
|   {
| 
|     static_assert (true);
| 
|   }
| 
|   namespace test_auto_brace_init_list
|   {
| 
|     auto foo = {5};
|     auto bar {5};
| 
|     static_assert(std::is_same<std::initializer_list<int>, decltype(foo)>::value);
|     static_assert(std::is_same<int, decltype(bar)>::value);
|   }
| 
|   namespace test_typename_in_template_template_parameter
|   {
| 
|     template<template<typename> typename X> struct D;
| 
|   }
| 
|   namespace test_fallthrough_nodiscard_maybe_unused_attributes
|   {
| 
|     int f1()
|     {
|       return 42;
|     }
| 
|     [[nodiscard]] int f2()
|     {
|       [[maybe_unused]] auto unused = f1();
| 
|       switch (f1())
|       {
|       case 17:
|         f1();
|         [[fallthrough]];
|       case 42:
|         f1();
|       }
|       return f1();
|     }
| 
|   }
| 
|   namespace test_extended_aggregate_initialization
|   {
| 
|     struct base1
|     {
|       int b1, b2 = 42;
|     };
| 
|     struct base2
|     {
|       base2() {
|         b3 = 42;
|       }
|       int b3;
|     };
| 
|     struct derived : base1, base2
|     {
|         int d;
|     };
| 
|     derived d1 {{1, 2}, {}, 4};  // full initialization
|     derived d2 {{}, {}, 4};      // value-initialized bases
| 
|   }
| 
|   namespace test_general_range_based_for_loop
|   {
| 
|     struct iter
|     {
|       int i;
| 
|       int& operator* ()
|       {
|         return i;
|       }
| 
|       const int& operator* () const
|       {
|         return i;
|       }
| 
|       iter& operator++()
|       {
|         ++i;
|         return *this;
|       }
|     };
| 
|     struct sentinel
|     {
|       int i;
|     };
| 
|     bool operator== (const iter& i, const sentinel& s)
|     {
|       return i.i == s.i;
|     }
| 
|     bool operator!= (const iter& i, const sentinel& s)
|     {
|       return !(i == s);
|     }
| 
|     struct range
|     {
|       iter begin() const
|       {
|         return {0};
|       }
| 
|       sentinel end() const
|       {
|         return {5};
|       }
|     };
| 
|     void f()
|     {
|       range r {};
| 
|       for (auto i : r)
|       {
|         [[maybe_unused]] auto v = i;
|       }
|     }
| 
|   }
| 
|   namespace test_lambda_capture_asterisk_this_by_value
|   {
| 
|     struct t
|     {
|       int i;
|       int foo()
|       {
|         return [*this]()
|         {
|           return i;
|         }();
|       }
|     };
| 
|   }
| 
|   namespace test_enum_class_construction
|   {
| 
|     enum class byte : unsigned char
|     {};
| 
|     byte foo {42};
| 
|   }
| 
|   namespace test_constexpr_if
|   {
| 
|     template <bool cond>
|     int f ()
|     {
|       if constexpr(cond)
|       {
|         return 13;
|       }
|       else
|       {
|         return 42;
|       }
|     }
| 
|   }
| 
|   namespace test_selection_statement_with_initializer
|   {
| 
|     int f()
|     {
|       return 13;
|     }
| 
|     int f2()
|     {
|       if (auto i = f(); i > 0)
|       {
|         return 3;
|       }
| 
|       switch (auto i = f(); i + 4)
|       {
|       case 17:
|         return 2;
| 
|       default:
|         return 1;
|       }
|     }
| 
|   }
| 
|   namespace test_template_argument_deduction_for_class_templates
|   {
| 
|     template <typename T1, typename T2>
|     struct pair
|     {
|       pair (T1 p1, T2 p2)
|         : m1 {p1},
|           m2 {p2}
|       {}
| 
|       T1 m1;
|       T2 m2;
|     };
| 
|     void f()
|     {
|       [[maybe_unused]] auto p = pair{13, 42u};
|     }
| 
|   }
| 
|   namespace test_non_type_auto_template_parameters
|   {
| 
|     template <auto n>
|     struct B
|     {};
| 
|     B<5> b1;
|     B<'a'> b2;
| 
|   }
| 
|   namespace test_structured_bindings
|   {
| 
|     int arr[2] = { 1, 2 };
|     std::pair<int, int> pr = { 1, 2 };
| 
|     auto f1() -> int(&)[2]
|     {
|       return arr;
|     }
| 
|     auto f2() -> std::pair<int, int>&
|     {
|       return pr;
|     }
| 
|     struct S
|     {
|       int x1 : 2;
|       volatile double y1;
|     };
| 
|     S f3()
|     {
|       return {};
|     }
| 
|     auto [ x1, y1 ] = f1();
|     auto& [ xr1, yr1 ] = f1();
|     auto [ x2, y2 ] = f2();
|     auto& [ xr2, yr2 ] = f2();
|     const auto [ x3, y3 ] = f3();
| 
|   }
| 
|   namespace test_exception_spec_type_system
|   {
| 
|     struct Good {};
|     struct Bad {};
| 
|     void g1() noexcept;
|     void g2();
| 
|     template<typename T>
|     Bad
|     f(T*, T*);
| 
|     template<typename T1, typename T2>
|     Good
|     f(T1*, T2*);
| 
|     static_assert (std::is_same_v<Good, decltype(f(g1, g2))>);
| 
|   }
| 
|   namespace test_inline_variables
|   {
| 
|     template<class T> void f(T)
|     {}
| 
|     template<class T> inline T g(T)
|     {
|       return T{};
|     }
| 
|     template<> inline void f<>(int)
|     {}
| 
|     template<> int g<>(int)
|     {
|       return 5;
|     }
| 
|   }
| 
| }  // namespace cxx17
| 
| #endif  // __cplusplus < 201703L
| 
| 
| 
configure:7066: result: no
configure:6259: checking whether cl.exe supports C++17 features with -std=c++1z
configure:7056: cl.exe -std=c++1z -c -g -I./include/msvc_compat conftest.cpp >&5
conftest.cpp
conftest.cpp(20): fatal error C1189: #error:  "This is not a C++11 compiler"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-std=c++1z'
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:7056: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++17, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201703L
| 
| #error "This is not a C++17 compiler"
| 
| #else
| 
| #include <initializer_list>
| #include <utility>
| #include <type_traits>
| 
| namespace cxx17
| {
| 
|   namespace test_constexpr_lambdas
|   {
| 
|     constexpr int foo = [](){return 42;}();
| 
|   }
| 
|   namespace test::nested_namespace::definitions
|   {
| 
|   }
| 
|   namespace test_fold_expression
|   {
| 
|     template<typename... Args>
|     int multiply(Args... args)
|     {
|       return (args * ... * 1);
|     }
| 
|     template<typename... Args>
|     bool all(Args... args)
|     {
|       return (args && ...);
|     }
| 
|   }
| 
|   namespace test_extended_static_assert
|   {
| 
|     static_assert (true);
| 
|   }
| 
|   namespace test_auto_brace_init_list
|   {
| 
|     auto foo = {5};
|     auto bar {5};
| 
|     static_assert(std::is_same<std::initializer_list<int>, decltype(foo)>::value);
|     static_assert(std::is_same<int, decltype(bar)>::value);
|   }
| 
|   namespace test_typename_in_template_template_parameter
|   {
| 
|     template<template<typename> typename X> struct D;
| 
|   }
| 
|   namespace test_fallthrough_nodiscard_maybe_unused_attributes
|   {
| 
|     int f1()
|     {
|       return 42;
|     }
| 
|     [[nodiscard]] int f2()
|     {
|       [[maybe_unused]] auto unused = f1();
| 
|       switch (f1())
|       {
|       case 17:
|         f1();
|         [[fallthrough]];
|       case 42:
|         f1();
|       }
|       return f1();
|     }
| 
|   }
| 
|   namespace test_extended_aggregate_initialization
|   {
| 
|     struct base1
|     {
|       int b1, b2 = 42;
|     };
| 
|     struct base2
|     {
|       base2() {
|         b3 = 42;
|       }
|       int b3;
|     };
| 
|     struct derived : base1, base2
|     {
|         int d;
|     };
| 
|     derived d1 {{1, 2}, {}, 4};  // full initialization
|     derived d2 {{}, {}, 4};      // value-initialized bases
| 
|   }
| 
|   namespace test_general_range_based_for_loop
|   {
| 
|     struct iter
|     {
|       int i;
| 
|       int& operator* ()
|       {
|         return i;
|       }
| 
|       const int& operator* () const
|       {
|         return i;
|       }
| 
|       iter& operator++()
|       {
|         ++i;
|         return *this;
|       }
|     };
| 
|     struct sentinel
|     {
|       int i;
|     };
| 
|     bool operator== (const iter& i, const sentinel& s)
|     {
|       return i.i == s.i;
|     }
| 
|     bool operator!= (const iter& i, const sentinel& s)
|     {
|       return !(i == s);
|     }
| 
|     struct range
|     {
|       iter begin() const
|       {
|         return {0};
|       }
| 
|       sentinel end() const
|       {
|         return {5};
|       }
|     };
| 
|     void f()
|     {
|       range r {};
| 
|       for (auto i : r)
|       {
|         [[maybe_unused]] auto v = i;
|       }
|     }
| 
|   }
| 
|   namespace test_lambda_capture_asterisk_this_by_value
|   {
| 
|     struct t
|     {
|       int i;
|       int foo()
|       {
|         return [*this]()
|         {
|           return i;
|         }();
|       }
|     };
| 
|   }
| 
|   namespace test_enum_class_construction
|   {
| 
|     enum class byte : unsigned char
|     {};
| 
|     byte foo {42};
| 
|   }
| 
|   namespace test_constexpr_if
|   {
| 
|     template <bool cond>
|     int f ()
|     {
|       if constexpr(cond)
|       {
|         return 13;
|       }
|       else
|       {
|         return 42;
|       }
|     }
| 
|   }
| 
|   namespace test_selection_statement_with_initializer
|   {
| 
|     int f()
|     {
|       return 13;
|     }
| 
|     int f2()
|     {
|       if (auto i = f(); i > 0)
|       {
|         return 3;
|       }
| 
|       switch (auto i = f(); i + 4)
|       {
|       case 17:
|         return 2;
| 
|       default:
|         return 1;
|       }
|     }
| 
|   }
| 
|   namespace test_template_argument_deduction_for_class_templates
|   {
| 
|     template <typename T1, typename T2>
|     struct pair
|     {
|       pair (T1 p1, T2 p2)
|         : m1 {p1},
|           m2 {p2}
|       {}
| 
|       T1 m1;
|       T2 m2;
|     };
| 
|     void f()
|     {
|       [[maybe_unused]] auto p = pair{13, 42u};
|     }
| 
|   }
| 
|   namespace test_non_type_auto_template_parameters
|   {
| 
|     template <auto n>
|     struct B
|     {};
| 
|     B<5> b1;
|     B<'a'> b2;
| 
|   }
| 
|   namespace test_structured_bindings
|   {
| 
|     int arr[2] = { 1, 2 };
|     std::pair<int, int> pr = { 1, 2 };
| 
|     auto f1() -> int(&)[2]
|     {
|       return arr;
|     }
| 
|     auto f2() -> std::pair<int, int>&
|     {
|       return pr;
|     }
| 
|     struct S
|     {
|       int x1 : 2;
|       volatile double y1;
|     };
| 
|     S f3()
|     {
|       return {};
|     }
| 
|     auto [ x1, y1 ] = f1();
|     auto& [ xr1, yr1 ] = f1();
|     auto [ x2, y2 ] = f2();
|     auto& [ xr2, yr2 ] = f2();
|     const auto [ x3, y3 ] = f3();
| 
|   }
| 
|   namespace test_exception_spec_type_system
|   {
| 
|     struct Good {};
|     struct Bad {};
| 
|     void g1() noexcept;
|     void g2();
| 
|     template<typename T>
|     Bad
|     f(T*, T*);
| 
|     template<typename T1, typename T2>
|     Good
|     f(T1*, T2*);
| 
|     static_assert (std::is_same_v<Good, decltype(f(g1, g2))>);
| 
|   }
| 
|   namespace test_inline_variables
|   {
| 
|     template<class T> void f(T)
|     {}
| 
|     template<class T> inline T g(T)
|     {
|       return T{};
|     }
| 
|     template<> inline void f<>(int)
|     {}
| 
|     template<> int g<>(int)
|     {
|       return 5;
|     }
| 
|   }
| 
| }  // namespace cxx17
| 
| #endif  // __cplusplus < 201703L
| 
| 
| 
configure:7066: result: no
configure:6259: checking whether cl.exe supports C++17 features with +std=c++1z
configure:7056: cl.exe +std=c++1z -c -g -I./include/msvc_compat conftest.cpp >&5
conftest.cpp
conftest.cpp(20): fatal error C1189: #error:  "This is not a C++11 compiler"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9024 : unrecognized source file type '+std=c++1z', object file assumed
cl : Command line warning D9027 : source file '+std=c++1z' ignored
configure:7056: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++17, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201703L
| 
| #error "This is not a C++17 compiler"
| 
| #else
| 
| #include <initializer_list>
| #include <utility>
| #include <type_traits>
| 
| namespace cxx17
| {
| 
|   namespace test_constexpr_lambdas
|   {
| 
|     constexpr int foo = [](){return 42;}();
| 
|   }
| 
|   namespace test::nested_namespace::definitions
|   {
| 
|   }
| 
|   namespace test_fold_expression
|   {
| 
|     template<typename... Args>
|     int multiply(Args... args)
|     {
|       return (args * ... * 1);
|     }
| 
|     template<typename... Args>
|     bool all(Args... args)
|     {
|       return (args && ...);
|     }
| 
|   }
| 
|   namespace test_extended_static_assert
|   {
| 
|     static_assert (true);
| 
|   }
| 
|   namespace test_auto_brace_init_list
|   {
| 
|     auto foo = {5};
|     auto bar {5};
| 
|     static_assert(std::is_same<std::initializer_list<int>, decltype(foo)>::value);
|     static_assert(std::is_same<int, decltype(bar)>::value);
|   }
| 
|   namespace test_typename_in_template_template_parameter
|   {
| 
|     template<template<typename> typename X> struct D;
| 
|   }
| 
|   namespace test_fallthrough_nodiscard_maybe_unused_attributes
|   {
| 
|     int f1()
|     {
|       return 42;
|     }
| 
|     [[nodiscard]] int f2()
|     {
|       [[maybe_unused]] auto unused = f1();
| 
|       switch (f1())
|       {
|       case 17:
|         f1();
|         [[fallthrough]];
|       case 42:
|         f1();
|       }
|       return f1();
|     }
| 
|   }
| 
|   namespace test_extended_aggregate_initialization
|   {
| 
|     struct base1
|     {
|       int b1, b2 = 42;
|     };
| 
|     struct base2
|     {
|       base2() {
|         b3 = 42;
|       }
|       int b3;
|     };
| 
|     struct derived : base1, base2
|     {
|         int d;
|     };
| 
|     derived d1 {{1, 2}, {}, 4};  // full initialization
|     derived d2 {{}, {}, 4};      // value-initialized bases
| 
|   }
| 
|   namespace test_general_range_based_for_loop
|   {
| 
|     struct iter
|     {
|       int i;
| 
|       int& operator* ()
|       {
|         return i;
|       }
| 
|       const int& operator* () const
|       {
|         return i;
|       }
| 
|       iter& operator++()
|       {
|         ++i;
|         return *this;
|       }
|     };
| 
|     struct sentinel
|     {
|       int i;
|     };
| 
|     bool operator== (const iter& i, const sentinel& s)
|     {
|       return i.i == s.i;
|     }
| 
|     bool operator!= (const iter& i, const sentinel& s)
|     {
|       return !(i == s);
|     }
| 
|     struct range
|     {
|       iter begin() const
|       {
|         return {0};
|       }
| 
|       sentinel end() const
|       {
|         return {5};
|       }
|     };
| 
|     void f()
|     {
|       range r {};
| 
|       for (auto i : r)
|       {
|         [[maybe_unused]] auto v = i;
|       }
|     }
| 
|   }
| 
|   namespace test_lambda_capture_asterisk_this_by_value
|   {
| 
|     struct t
|     {
|       int i;
|       int foo()
|       {
|         return [*this]()
|         {
|           return i;
|         }();
|       }
|     };
| 
|   }
| 
|   namespace test_enum_class_construction
|   {
| 
|     enum class byte : unsigned char
|     {};
| 
|     byte foo {42};
| 
|   }
| 
|   namespace test_constexpr_if
|   {
| 
|     template <bool cond>
|     int f ()
|     {
|       if constexpr(cond)
|       {
|         return 13;
|       }
|       else
|       {
|         return 42;
|       }
|     }
| 
|   }
| 
|   namespace test_selection_statement_with_initializer
|   {
| 
|     int f()
|     {
|       return 13;
|     }
| 
|     int f2()
|     {
|       if (auto i = f(); i > 0)
|       {
|         return 3;
|       }
| 
|       switch (auto i = f(); i + 4)
|       {
|       case 17:
|         return 2;
| 
|       default:
|         return 1;
|       }
|     }
| 
|   }
| 
|   namespace test_template_argument_deduction_for_class_templates
|   {
| 
|     template <typename T1, typename T2>
|     struct pair
|     {
|       pair (T1 p1, T2 p2)
|         : m1 {p1},
|           m2 {p2}
|       {}
| 
|       T1 m1;
|       T2 m2;
|     };
| 
|     void f()
|     {
|       [[maybe_unused]] auto p = pair{13, 42u};
|     }
| 
|   }
| 
|   namespace test_non_type_auto_template_parameters
|   {
| 
|     template <auto n>
|     struct B
|     {};
| 
|     B<5> b1;
|     B<'a'> b2;
| 
|   }
| 
|   namespace test_structured_bindings
|   {
| 
|     int arr[2] = { 1, 2 };
|     std::pair<int, int> pr = { 1, 2 };
| 
|     auto f1() -> int(&)[2]
|     {
|       return arr;
|     }
| 
|     auto f2() -> std::pair<int, int>&
|     {
|       return pr;
|     }
| 
|     struct S
|     {
|       int x1 : 2;
|       volatile double y1;
|     };
| 
|     S f3()
|     {
|       return {};
|     }
| 
|     auto [ x1, y1 ] = f1();
|     auto& [ xr1, yr1 ] = f1();
|     auto [ x2, y2 ] = f2();
|     auto& [ xr2, yr2 ] = f2();
|     const auto [ x3, y3 ] = f3();
| 
|   }
| 
|   namespace test_exception_spec_type_system
|   {
| 
|     struct Good {};
|     struct Bad {};
| 
|     void g1() noexcept;
|     void g2();
| 
|     template<typename T>
|     Bad
|     f(T*, T*);
| 
|     template<typename T1, typename T2>
|     Good
|     f(T1*, T2*);
| 
|     static_assert (std::is_same_v<Good, decltype(f(g1, g2))>);
| 
|   }
| 
|   namespace test_inline_variables
|   {
| 
|     template<class T> void f(T)
|     {}
| 
|     template<class T> inline T g(T)
|     {
|       return T{};
|     }
| 
|     template<> inline void f<>(int)
|     {}
| 
|     template<> int g<>(int)
|     {
|       return 5;
|     }
| 
|   }
| 
| }  // namespace cxx17
| 
| #endif  // __cplusplus < 201703L
| 
| 
| 
configure:7066: result: no
configure:6259: checking whether cl.exe supports C++17 features with -h std=c++1z
configure:7056: cl.exe -h std=c++1z -c -g -I./include/msvc_compat conftest.cpp >&5
conftest.cpp
conftest.cpp(20): fatal error C1189: #error:  "This is not a C++11 compiler"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-h'
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9024 : unrecognized source file type 'std=c++1z', object file assumed
cl : Command line warning D9027 : source file 'std=c++1z' ignored
configure:7056: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++17, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201703L
| 
| #error "This is not a C++17 compiler"
| 
| #else
| 
| #include <initializer_list>
| #include <utility>
| #include <type_traits>
| 
| namespace cxx17
| {
| 
|   namespace test_constexpr_lambdas
|   {
| 
|     constexpr int foo = [](){return 42;}();
| 
|   }
| 
|   namespace test::nested_namespace::definitions
|   {
| 
|   }
| 
|   namespace test_fold_expression
|   {
| 
|     template<typename... Args>
|     int multiply(Args... args)
|     {
|       return (args * ... * 1);
|     }
| 
|     template<typename... Args>
|     bool all(Args... args)
|     {
|       return (args && ...);
|     }
| 
|   }
| 
|   namespace test_extended_static_assert
|   {
| 
|     static_assert (true);
| 
|   }
| 
|   namespace test_auto_brace_init_list
|   {
| 
|     auto foo = {5};
|     auto bar {5};
| 
|     static_assert(std::is_same<std::initializer_list<int>, decltype(foo)>::value);
|     static_assert(std::is_same<int, decltype(bar)>::value);
|   }
| 
|   namespace test_typename_in_template_template_parameter
|   {
| 
|     template<template<typename> typename X> struct D;
| 
|   }
| 
|   namespace test_fallthrough_nodiscard_maybe_unused_attributes
|   {
| 
|     int f1()
|     {
|       return 42;
|     }
| 
|     [[nodiscard]] int f2()
|     {
|       [[maybe_unused]] auto unused = f1();
| 
|       switch (f1())
|       {
|       case 17:
|         f1();
|         [[fallthrough]];
|       case 42:
|         f1();
|       }
|       return f1();
|     }
| 
|   }
| 
|   namespace test_extended_aggregate_initialization
|   {
| 
|     struct base1
|     {
|       int b1, b2 = 42;
|     };
| 
|     struct base2
|     {
|       base2() {
|         b3 = 42;
|       }
|       int b3;
|     };
| 
|     struct derived : base1, base2
|     {
|         int d;
|     };
| 
|     derived d1 {{1, 2}, {}, 4};  // full initialization
|     derived d2 {{}, {}, 4};      // value-initialized bases
| 
|   }
| 
|   namespace test_general_range_based_for_loop
|   {
| 
|     struct iter
|     {
|       int i;
| 
|       int& operator* ()
|       {
|         return i;
|       }
| 
|       const int& operator* () const
|       {
|         return i;
|       }
| 
|       iter& operator++()
|       {
|         ++i;
|         return *this;
|       }
|     };
| 
|     struct sentinel
|     {
|       int i;
|     };
| 
|     bool operator== (const iter& i, const sentinel& s)
|     {
|       return i.i == s.i;
|     }
| 
|     bool operator!= (const iter& i, const sentinel& s)
|     {
|       return !(i == s);
|     }
| 
|     struct range
|     {
|       iter begin() const
|       {
|         return {0};
|       }
| 
|       sentinel end() const
|       {
|         return {5};
|       }
|     };
| 
|     void f()
|     {
|       range r {};
| 
|       for (auto i : r)
|       {
|         [[maybe_unused]] auto v = i;
|       }
|     }
| 
|   }
| 
|   namespace test_lambda_capture_asterisk_this_by_value
|   {
| 
|     struct t
|     {
|       int i;
|       int foo()
|       {
|         return [*this]()
|         {
|           return i;
|         }();
|       }
|     };
| 
|   }
| 
|   namespace test_enum_class_construction
|   {
| 
|     enum class byte : unsigned char
|     {};
| 
|     byte foo {42};
| 
|   }
| 
|   namespace test_constexpr_if
|   {
| 
|     template <bool cond>
|     int f ()
|     {
|       if constexpr(cond)
|       {
|         return 13;
|       }
|       else
|       {
|         return 42;
|       }
|     }
| 
|   }
| 
|   namespace test_selection_statement_with_initializer
|   {
| 
|     int f()
|     {
|       return 13;
|     }
| 
|     int f2()
|     {
|       if (auto i = f(); i > 0)
|       {
|         return 3;
|       }
| 
|       switch (auto i = f(); i + 4)
|       {
|       case 17:
|         return 2;
| 
|       default:
|         return 1;
|       }
|     }
| 
|   }
| 
|   namespace test_template_argument_deduction_for_class_templates
|   {
| 
|     template <typename T1, typename T2>
|     struct pair
|     {
|       pair (T1 p1, T2 p2)
|         : m1 {p1},
|           m2 {p2}
|       {}
| 
|       T1 m1;
|       T2 m2;
|     };
| 
|     void f()
|     {
|       [[maybe_unused]] auto p = pair{13, 42u};
|     }
| 
|   }
| 
|   namespace test_non_type_auto_template_parameters
|   {
| 
|     template <auto n>
|     struct B
|     {};
| 
|     B<5> b1;
|     B<'a'> b2;
| 
|   }
| 
|   namespace test_structured_bindings
|   {
| 
|     int arr[2] = { 1, 2 };
|     std::pair<int, int> pr = { 1, 2 };
| 
|     auto f1() -> int(&)[2]
|     {
|       return arr;
|     }
| 
|     auto f2() -> std::pair<int, int>&
|     {
|       return pr;
|     }
| 
|     struct S
|     {
|       int x1 : 2;
|       volatile double y1;
|     };
| 
|     S f3()
|     {
|       return {};
|     }
| 
|     auto [ x1, y1 ] = f1();
|     auto& [ xr1, yr1 ] = f1();
|     auto [ x2, y2 ] = f2();
|     auto& [ xr2, yr2 ] = f2();
|     const auto [ x3, y3 ] = f3();
| 
|   }
| 
|   namespace test_exception_spec_type_system
|   {
| 
|     struct Good {};
|     struct Bad {};
| 
|     void g1() noexcept;
|     void g2();
| 
|     template<typename T>
|     Bad
|     f(T*, T*);
| 
|     template<typename T1, typename T2>
|     Good
|     f(T1*, T2*);
| 
|     static_assert (std::is_same_v<Good, decltype(f(g1, g2))>);
| 
|   }
| 
|   namespace test_inline_variables
|   {
| 
|     template<class T> void f(T)
|     {}
| 
|     template<class T> inline T g(T)
|     {
|       return T{};
|     }
| 
|     template<> inline void f<>(int)
|     {}
| 
|     template<> int g<>(int)
|     {
|       return 5;
|     }
| 
|   }
| 
| }  // namespace cxx17
| 
| #endif  // __cplusplus < 201703L
| 
| 
| 
configure:7066: result: no
configure:7095: No compiler with C++17 support was found
configure:7120: checking whether cl.exe supports C++14 features with -std=c++14
configure:7539: cl.exe -std=c++14 -c -g -I./include/msvc_compat conftest.cpp >&5
conftest.cpp
conftest.cpp(20): fatal error C1189: #error:  "This is not a C++11 compiler"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-std=c++14'
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:7539: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
configure:7549: result: no
configure:7120: checking whether cl.exe supports C++14 features with +std=c++14
configure:7539: cl.exe +std=c++14 -c -g -I./include/msvc_compat conftest.cpp >&5
conftest.cpp
conftest.cpp(20): fatal error C1189: #error:  "This is not a C++11 compiler"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9024 : unrecognized source file type '+std=c++14', object file assumed
cl : Command line warning D9027 : source file '+std=c++14' ignored
configure:7539: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
configure:7549: result: no
configure:7120: checking whether cl.exe supports C++14 features with -h std=c++14
configure:7539: cl.exe -h std=c++14 -c -g -I./include/msvc_compat conftest.cpp >&5
conftest.cpp
conftest.cpp(20): fatal error C1189: #error:  "This is not a C++11 compiler"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-h'
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9024 : unrecognized source file type 'std=c++14', object file assumed
cl : Command line warning D9027 : source file 'std=c++14' ignored
configure:7539: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
configure:7549: result: no
configure:7120: checking whether cl.exe supports C++14 features with -std=c++1y
configure:7539: cl.exe -std=c++1y -c -g -I./include/msvc_compat conftest.cpp >&5
conftest.cpp
conftest.cpp(20): fatal error C1189: #error:  "This is not a C++11 compiler"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-std=c++1y'
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:7539: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
configure:7549: result: no
configure:7120: checking whether cl.exe supports C++14 features with +std=c++1y
configure:7539: cl.exe +std=c++1y -c -g -I./include/msvc_compat conftest.cpp >&5
conftest.cpp
conftest.cpp(20): fatal error C1189: #error:  "This is not a C++11 compiler"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9024 : unrecognized source file type '+std=c++1y', object file assumed
cl : Command line warning D9027 : source file '+std=c++1y' ignored
configure:7539: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
configure:7549: result: no
configure:7120: checking whether cl.exe supports C++14 features with -h std=c++1y
configure:7539: cl.exe -h std=c++1y -c -g -I./include/msvc_compat conftest.cpp >&5
conftest.cpp
conftest.cpp(20): fatal error C1189: #error:  "This is not a C++11 compiler"
Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29914 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-h'
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9024 : unrecognized source file type 'std=c++1y', object file assumed
cl : Command line warning D9027 : source file 'std=c++1y' ignored
configure:7539: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
configure:7549: result: no
configure:7578: No compiler with C++14 support was found
configure:7848: checking for stdio.h
configure:7848: cl.exe -nologo -c -Zi -MT -W3 -FS -I./include/msvc_compat conftest.c >&5
conftest.c
configure:7848: $? = 0
configure:7848: result: yes
configure:7848: checking for stdlib.h
configure:7848: cl.exe -nologo -c -Zi -MT -W3 -FS -I./include/msvc_compat conftest.c >&5
conftest.c
configure:7848: $? = 0
configure:7848: result: yes
configure:7848: checking for string.h
configure:7848: cl.exe -nologo -c -Zi -MT -W3 -FS -I./include/msvc_compat conftest.c >&5
conftest.c
configure:7848: $? = 0
configure:7848: result: yes
configure:7848: checking for inttypes.h
configure:7848: cl.exe -nologo -c -Zi -MT -W3 -FS -I./include/msvc_compat conftest.c >&5
conftest.c
configure:7848: $? = 0
configure:7848: result: yes
configure:7848: checking for stdint.h
configure:7848: cl.exe -nologo -c -Zi -MT -W3 -FS -I./include/msvc_compat conftest.c >&5
conftest.c
configure:7848: $? = 0
configure:7848: result: yes
configure:7848: checking for strings.h
configure:7848: cl.exe -nologo -c -Zi -MT -W3 -FS -I./include/msvc_compat conftest.c >&5
conftest.c
configure:7848: $? = 0
configure:7848: result: yes
configure:7848: checking for sys/stat.h
configure:7848: cl.exe -nologo -c -Zi -MT -W3 -FS -I./include/msvc_compat conftest.c >&5
conftest.c
configure:7848: $? = 0
configure:7848: result: yes
configure:7848: checking for sys/types.h
configure:7848: cl.exe -nologo -c -Zi -MT -W3 -FS -I./include/msvc_compat conftest.c >&5
conftest.c
configure:7848: $? = 0
configure:7848: result: yes
configure:7848: checking for unistd.h
configure:7848: cl.exe -nologo -c -Zi -MT -W3 -FS -I./include/msvc_compat conftest.c >&5
conftest.c
conftest.c(45): fatal error C1083: Cannot open include file: 'unistd.h': No such file or directory
configure:7848: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <unistd.h>
configure:7848: result: no
configure:7873: checking whether byte ordering is bigendian
configure:7889: cl.exe -nologo -c -Zi -MT -W3 -FS -I./include/msvc_compat conftest.c >&5
conftest.c
conftest.c(19): error C2061: syntax error: identifier 'a'
conftest.c(19): error C2059: syntax error: ';'
conftest.c(19): error C2061: syntax error: identifier 'capable'
conftest.c(21): error C2054: expected '(' to follow 'compiler'
conftest.c(21): error C2085: 'dummy': not in formal parameter list
conftest.c(23): fatal error C1004: unexpected end-of-file found
configure:7889: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| /* end confdefs.h.  */
| #ifndef __APPLE_CC__
| 	       not a universal capable compiler
| 	     #endif
| 	     typedef int dummy;
| 
configure:7935: cl.exe -nologo -c -Zi -MT -W3 -FS -I./include/msvc_compat conftest.c >&5
conftest.c
conftest.c(19): fatal error C1083: Cannot open include file: 'sys/param.h': No such file or directory
configure:7935: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| /* end confdefs.h.  */
| #include <sys/types.h>
| 	     #include <sys/param.h>
| 
| int
| main (void)
| {
| #if ! (defined BYTE_ORDER && defined BIG_ENDIAN 		     && defined LITTLE_ENDIAN && BYTE_ORDER && BIG_ENDIAN 		     && LITTLE_ENDIAN)
| 	      bogus endian macros
| 	     #endif
| 
|   ;
|   return 0;
| }
configure:7981: cl.exe -nologo -c -Zi -MT -W3 -FS -I./include/msvc_compat conftest.c >&5
conftest.c
conftest.c(24): error C2065: 'bogus': undeclared identifier
conftest.c(24): error C2146: syntax error: missing ';' before identifier 'endian'
conftest.c(24): error C2065: 'endian': undeclared identifier
conftest.c(24): error C2146: syntax error: missing ';' before identifier 'macros'
conftest.c(27): error C2065: 'macros': undeclared identifier
configure:7981: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| /* end confdefs.h.  */
| #include <limits.h>
| 
| int
| main (void)
| {
| #if ! (defined _LITTLE_ENDIAN || defined _BIG_ENDIAN)
| 	      bogus endian macros
| 	     #endif
| 
|   ;
|   return 0;
| }
configure:8076: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat  conftest.c  >&5
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
conftest.c
configure:8076: $? = 0
configure:8076: ./conftest.exe
configure:8076: $? = 0
configure:8088: result: no
configure:8123: result: Using a predefined value for sizeof(void *): 4 for 32-bit, 8 for 64-bit
configure:8174: checking size of int
configure:8180: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat  conftest.c  >&5
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
conftest.c
conftest.c(55): warning C4996: 'fopen': This function or variable may be unsafe. Consider using fopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
LINK : conftest.exe not found or not built by the last incremental link; performing full link
configure:8180: $? = 0
configure:8180: ./conftest.exe
configure:8180: $? = 0
configure:8195: result: 4
configure:8217: checking size of long
configure:8223: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat  conftest.c  >&5
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
conftest.c
conftest.c(57): warning C4996: 'fopen': This function or variable may be unsafe. Consider using fopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
LINK : conftest.exe not found or not built by the last incremental link; performing full link
configure:8223: $? = 0
configure:8223: ./conftest.exe
configure:8223: $? = 0
configure:8238: result: 4
configure:8260: checking size of long long
configure:8266: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat  conftest.c  >&5
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
conftest.c
conftest.c(59): warning C4996: 'fopen': This function or variable may be unsafe. Consider using fopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
LINK : conftest.exe not found or not built by the last incremental link; performing full link
configure:8266: $? = 0
configure:8266: ./conftest.exe
configure:8266: $? = 0
configure:8281: result: 8
configure:8303: checking size of intmax_t
configure:8309: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat  conftest.c  >&5
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
conftest.c
conftest.c(61): warning C4996: 'fopen': This function or variable may be unsafe. Consider using fopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
LINK : conftest.exe not found or not built by the last incremental link; performing full link
configure:8309: $? = 0
configure:8309: ./conftest.exe
configure:8309: $? = 0
configure:8324: result: 8
configure:8351: checking build system type
configure:8366: result: x86_64-pc-mingw64
configure:8386: checking host system type
configure:8400: result: x86_64-pc-mingw64
configure:8430: checking whether pause instruction MSVC is compilable
configure:8447: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat  conftest.c  >&5
conftest.c
LINK : conftest.exe not found or not built by the last incremental link; performing full link
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:8447: $? = 0
configure:8456: result: yes
configure:8585: checking number of significant virtual address bits
configure:8638: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat  conftest.c  >&5
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
conftest.c
conftest.c(55): warning C4996: 'fopen': This function or variable may be unsafe. Consider using fopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
LINK : conftest.exe not found or not built by the last incremental link; performing full link
configure:8638: $? = 0
configure:8638: ./conftest.exe
configure:8638: $? = 0
configure:8649: result: 48
configure:8762: checking for ar
configure:8783: found /mingw64/bin/ar
configure:8794: result: ar
configure:8868: checking for nm
configure:8889: found /mingw64/bin/nm
configure:8900: result: nm
configure:8927: checking for gawk
configure:8948: found /usr/bin/gawk
configure:8959: result: gawk
configure:9241: checking for malloc.h
configure:9241: cl.exe -nologo -c -Zi -MT -W3 -FS -I./include/msvc_compat conftest.c >&5
conftest.c
configure:9241: $? = 0
configure:9241: result: yes
configure:9246: checking whether malloc_usable_size definition can use const argument
configure:9262: cl.exe -nologo -c -Zi -MT -W3 -FS -I./include/msvc_compat conftest.c >&5
conftest.c
configure:9262: $? = 0
configure:9265: result: yes
configure:9305: checking for library containing log
configure:9335: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat  conftest.c  >&5
conftest.c
LINK : conftest.exe not found or not built by the last incremental link; performing full link
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:9335: $? = 0
configure:9355: result: none required
configure:9374: checking whether __attribute__ syntax is compilable
configure:9391: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat  conftest.c  >&5
conftest.c
conftest.c(33): error C2143: syntax error: missing ')' before '('
conftest.c(33): error C2059: syntax error: ')'
conftest.c(33): error C2143: syntax error: missing ')' before 'type'
conftest.c(33): error C2091: function returns function
conftest.c(33): error C2085: 'foo': not in formal parameter list
conftest.c(33): error C2143: syntax error: missing ';' before '{'
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:9391: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| /* end confdefs.h.  */
| static __attribute__((unused)) void foo(void){}
| int
| main (void)
| {
| 
|   ;
|   return 0;
| }
configure:9400: result: no
configure:9528: checking whether compiler supports -Werror
configure:9559: cl.exe -nologo -c -Zi -MT -W3 -FS -Werror -I./include/msvc_compat conftest.c >&5
cl : Command line error D8021 : invalid numeric argument '/Werror'
configure:9559: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| /* end confdefs.h.  */
| 
| 
| int
| main (void)
| {
| 
|     return 0;
| 
|   ;
|   return 0;
| }
configure:9566: result: no
configure:9580: checking whether compiler supports -herror_on_warning
configure:9611: cl.exe -nologo -c -Zi -MT -W3 -FS -herror_on_warning -I./include/msvc_compat conftest.c >&5
conftest.c
cl : Command line warning D9002 : ignoring unknown option '-herror_on_warning'
configure:9611: $? = 0
configure:9614: result: yes
configure:9632: checking whether tls_model attribute is compilable
configure:9651: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -herror_on_warning -I./include/msvc_compat  conftest.c  >&5
conftest.c
conftest.c(38): error C2143: syntax error: missing ';' before 'type'
conftest.c(38): error C2143: syntax error: missing ')' before '('
conftest.c(38): error C2091: function returns function
conftest.c(38): error C2143: syntax error: missing ')' before 'string'
conftest.c(38): error C2143: syntax error: missing ';' before 'string'
conftest.c(38): error C2059: syntax error: ')'
conftest.c(38): error C2065: 'unused': undeclared identifier
conftest.c(38): error C2146: syntax error: missing ';' before identifier 'foo'
conftest.c(38): error C2065: 'foo': undeclared identifier
conftest.c(39): error C2065: 'foo': undeclared identifier
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-herror_on_warning'
configure:9651: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| static __thread int
|                __attribute__((tls_model("initial-exec"), unused)) foo;
|                foo = 0;
|   ;
|   return 0;
| }
configure:9660: result: no
configure:9675: checking whether compiler supports -Werror
configure:9706: cl.exe -nologo -c -Zi -MT -W3 -FS -Werror -I./include/msvc_compat conftest.c >&5
cl : Command line error D8021 : invalid numeric argument '/Werror'
configure:9706: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| /* end confdefs.h.  */
| 
| 
| int
| main (void)
| {
| 
|     return 0;
| 
|   ;
|   return 0;
| }
configure:9713: result: no
configure:9727: checking whether compiler supports -herror_on_warning
configure:9758: cl.exe -nologo -c -Zi -MT -W3 -FS -herror_on_warning -I./include/msvc_compat conftest.c >&5
conftest.c
cl : Command line warning D9002 : ignoring unknown option '-herror_on_warning'
configure:9758: $? = 0
configure:9761: result: yes
configure:9779: checking whether alloc_size attribute is compilable
configure:9796: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -herror_on_warning -I./include/msvc_compat  conftest.c  >&5
conftest.c
conftest.c(37): error C2146: syntax error: missing ';' before identifier '__attribute__'
conftest.c(37): warning C4013: '__attribute__' undefined; assuming extern returning int
conftest.c(37): warning C4013: 'alloc_size' undefined; assuming extern returning int
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-herror_on_warning'
configure:9796: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| /* end confdefs.h.  */
| #include <stdlib.h>
| int
| main (void)
| {
| void *foo(size_t size) __attribute__((alloc_size(1)));
|   ;
|   return 0;
| }
configure:9805: result: no
configure:9823: checking whether compiler supports -Werror
configure:9854: cl.exe -nologo -c -Zi -MT -W3 -FS -Werror -I./include/msvc_compat conftest.c >&5
cl : Command line error D8021 : invalid numeric argument '/Werror'
configure:9854: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| /* end confdefs.h.  */
| 
| 
| int
| main (void)
| {
| 
|     return 0;
| 
|   ;
|   return 0;
| }
configure:9861: result: no
configure:9875: checking whether compiler supports -herror_on_warning
configure:9906: cl.exe -nologo -c -Zi -MT -W3 -FS -herror_on_warning -I./include/msvc_compat conftest.c >&5
conftest.c
cl : Command line warning D9002 : ignoring unknown option '-herror_on_warning'
configure:9906: $? = 0
configure:9909: result: yes
configure:9927: checking whether format(gnu_printf, ...) attribute is compilable
configure:9944: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -herror_on_warning -I./include/msvc_compat  conftest.c  >&5
conftest.c
conftest.c(37): error C2146: syntax error: missing ';' before identifier '__attribute__'
conftest.c(37): warning C4013: '__attribute__' undefined; assuming extern returning int
conftest.c(37): warning C4013: 'format' undefined; assuming extern returning int
conftest.c(37): error C2065: 'gnu_printf': undeclared identifier
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-herror_on_warning'
configure:9944: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| /* end confdefs.h.  */
| #include <stdlib.h>
| int
| main (void)
| {
| void *foo(const char *format, ...) __attribute__((format(gnu_printf, 1, 2)));
|   ;
|   return 0;
| }
configure:9953: result: no
configure:9971: checking whether compiler supports -Werror
configure:10002: cl.exe -nologo -c -Zi -MT -W3 -FS -Werror -I./include/msvc_compat conftest.c >&5
cl : Command line error D8021 : invalid numeric argument '/Werror'
configure:10002: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| /* end confdefs.h.  */
| 
| 
| int
| main (void)
| {
| 
|     return 0;
| 
|   ;
|   return 0;
| }
configure:10009: result: no
configure:10023: checking whether compiler supports -herror_on_warning
configure:10054: cl.exe -nologo -c -Zi -MT -W3 -FS -herror_on_warning -I./include/msvc_compat conftest.c >&5
conftest.c
cl : Command line warning D9002 : ignoring unknown option '-herror_on_warning'
configure:10054: $? = 0
configure:10057: result: yes
configure:10075: checking whether format(printf, ...) attribute is compilable
configure:10092: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -herror_on_warning -I./include/msvc_compat  conftest.c  >&5
conftest.c
conftest.c(37): error C2146: syntax error: missing ';' before identifier '__attribute__'
conftest.c(37): warning C4013: '__attribute__' undefined; assuming extern returning int
conftest.c(37): warning C4013: 'format' undefined; assuming extern returning int
conftest.c(37): error C2065: 'printf': undeclared identifier
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-herror_on_warning'
configure:10092: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| /* end confdefs.h.  */
| #include <stdlib.h>
| int
| main (void)
| {
| void *foo(const char *format, ...) __attribute__((format(printf, 1, 2)));
|   ;
|   return 0;
| }
configure:10101: result: no
configure:10120: checking whether compiler supports -Werror
configure:10151: cl.exe -nologo -c -Zi -MT -W3 -FS -Werror -I./include/msvc_compat conftest.c >&5
cl : Command line error D8021 : invalid numeric argument '/Werror'
configure:10151: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| /* end confdefs.h.  */
| 
| 
| int
| main (void)
| {
| 
|     return 0;
| 
|   ;
|   return 0;
| }
configure:10158: result: no
configure:10172: checking whether compiler supports -herror_on_warning
configure:10203: cl.exe -nologo -c -Zi -MT -W3 -FS -herror_on_warning -I./include/msvc_compat conftest.c >&5
conftest.c
cl : Command line warning D9002 : ignoring unknown option '-herror_on_warning'
configure:10203: $? = 0
configure:10206: result: yes
configure:10224: checking whether format(printf, ...) attribute is compilable
configure:10241: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -herror_on_warning -I./include/msvc_compat  conftest.c  >&5
conftest.c
conftest.c(37): error C2143: syntax error: missing ')' before '('
conftest.c(37): error C2091: function returns function
conftest.c(37): error C2143: syntax error: missing ')' before 'constant'
conftest.c(37): error C2143: syntax error: missing ';' before 'constant'
conftest.c(37): error C2059: syntax error: ')'
conftest.c(37): error C2146: syntax error: missing ';' before identifier 'foo'
conftest.c(37): warning C4013: 'foo' undefined; assuming extern returning int
conftest.c(37): error C2143: syntax error: missing ')' before 'const'
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-herror_on_warning'
configure:10241: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| /* end confdefs.h.  */
| #include <stdlib.h>
| int
| main (void)
| {
| const char * __attribute__((__format_arg__(1))) foo(const char *format);
|   ;
|   return 0;
| }
configure:10250: result: no
configure:10269: checking whether compiler supports -Wimplicit-fallthrough
configure:10300: cl.exe -nologo -c -Zi -MT -W3 -FS -Wimplicit-fallthrough -I./include/msvc_compat conftest.c >&5
cl : Command line error D8021 : invalid numeric argument '/Wimplicit-fallthrough'
configure:10300: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| /* end confdefs.h.  */
| 
| 
| int
| main (void)
| {
| 
|     return 0;
| 
|   ;
|   return 0;
| }
configure:10307: result: no
configure:10321: checking whether fallthrough attribute is compilable
configure:10344: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat  conftest.c  >&5
conftest.c
conftest.c(33): warning C4067: unexpected tokens following preprocessor directive - expected a newline
conftest.c(34): fatal error C1189: #error:  "foo"
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:10344: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| /* end confdefs.h.  */
| #if !__has_attribute(fallthrough)
|                #error "foo"
|                #endif
| int
| main (void)
| {
| int x = 0;
|                switch (x) {
|                case 0: __attribute__((__fallthrough__));
|                case 1: return 1;
|                }
|   ;
|   return 0;
| }
configure:10353: result: no
configure:10488: checking whether compiler supports -Werror
configure:10519: cl.exe -nologo -c -Zi -MT -W3 -FS -Werror -I./include/msvc_compat conftest.c >&5
cl : Command line error D8021 : invalid numeric argument '/Werror'
configure:10519: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| /* end confdefs.h.  */
| 
| 
| int
| main (void)
| {
| 
|     return 0;
| 
|   ;
|   return 0;
| }
configure:10526: result: no
configure:10540: checking whether compiler supports -herror_on_warning
configure:10571: cl.exe -nologo -c -Zi -MT -W3 -FS -herror_on_warning -I./include/msvc_compat conftest.c >&5
conftest.c
cl : Command line warning D9002 : ignoring unknown option '-herror_on_warning'
configure:10571: $? = 0
configure:10574: result: yes
configure:10592: checking whether cold attribute is compilable
configure:10609: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -herror_on_warning -I./include/msvc_compat  conftest.c  >&5
conftest.c
conftest.c(37): warning C4013: '__attribute__' undefined; assuming extern returning int
conftest.c(37): error C2065: '__cold__': undeclared identifier
conftest.c(37): error C2143: syntax error: missing ';' before 'type'
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-herror_on_warning'
configure:10609: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| __attribute__((__cold__)) void foo();
|   ;
|   return 0;
| }
configure:10618: result: no
configure:10635: checking whether vm_make_tag is compilable
configure:10655: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat  conftest.c  >&5
conftest.c
conftest.c(33): fatal error C1083: Cannot open include file: 'sys/mman.h': No such file or directory
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:10655: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| /* end confdefs.h.  */
| #include <sys/mman.h>
| 	       #include <mach/vm_statistics.h>
| int
| main (void)
| {
| void *p;
| 	       p = mmap(0, 16, PROT_READ, MAP_ANON|MAP_PRIVATE, VM_MAKE_TAG(1), 0);
| 	       munmap(p, 16);
|   ;
|   return 0;
| }
configure:10664: result: no
configure:10719: checking for a BSD-compatible install
configure:10792: result: /usr/bin/install -c
configure:10851: checking for ranlib
configure:10872: found /mingw64/bin/ranlib
configure:10883: result: ranlib
configure:10907: checking for ld
configure:10930: found /mingw64/bin/ld
configure:10943: result: /mingw64/bin/ld
configure:10953: checking for autoconf
configure:10976: found /usr/bin/autoconf
configure:10989: result: /usr/bin/autoconf
configure:11100: checking for memalign
configure:11100: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat  conftest.c  >&5
conftest.c
LINK : conftest.exe not found or not built by the last incremental link; performing full link
conftest.obj : error LNK2019: unresolved external symbol memalign referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:11100: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| /* end confdefs.h.  */
| /* Define memalign to an innocuous variant, in case <limits.h> declares memalign.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define memalign innocuous_memalign
| 
| /* System header to define __stub macros and hopefully few prototypes,
|    which can conflict with char memalign (); below.  */
| 
| #include <limits.h>
| #undef memalign
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char memalign ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_memalign || defined __stub___memalign
| choke me
| #endif
| 
| int
| main (void)
| {
| return memalign ();
|   ;
|   return 0;
| }
configure:11100: result: no
configure:11108: checking for valloc
configure:11108: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat  conftest.c  >&5
conftest.c
conftest.obj : error LNK2019: unresolved external symbol valloc referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:11108: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| /* end confdefs.h.  */
| /* Define valloc to an innocuous variant, in case <limits.h> declares valloc.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define valloc innocuous_valloc
| 
| /* System header to define __stub macros and hopefully few prototypes,
|    which can conflict with char valloc (); below.  */
| 
| #include <limits.h>
| #undef valloc
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char valloc ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_valloc || defined __stub___valloc
| choke me
| #endif
| 
| int
| main (void)
| {
| return valloc ();
|   ;
|   return 0;
| }
configure:11108: result: no
configure:12061: checking configured backtracing method
configure:12063: result: N/A
configure:12091: checking for sbrk
configure:12091: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat  conftest.c  >&5
conftest.c
conftest.obj : error LNK2019: unresolved external symbol sbrk referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:12091: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| /* end confdefs.h.  */
| /* Define sbrk to an innocuous variant, in case <limits.h> declares sbrk.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define sbrk innocuous_sbrk
| 
| /* System header to define __stub macros and hopefully few prototypes,
|    which can conflict with char sbrk (); below.  */
| 
| #include <limits.h>
| #undef sbrk
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char sbrk ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_sbrk || defined __stub___sbrk
| choke me
| #endif
| 
| int
| main (void)
| {
| return sbrk ();
|   ;
|   return 0;
| }
configure:12091: result: no
configure:12149: checking whether utrace(2) is compilable
configure:12174: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat  conftest.c  >&5
conftest.c
conftest.c(42): fatal error C1083: Cannot open include file: 'sys/param.h': No such file or directory
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:12174: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| /* end confdefs.h.  */
| 
| #include <sys/types.h>
| #include <sys/param.h>
| #include <sys/time.h>
| #include <sys/uio.h>
| #include <sys/ktrace.h>
| 
| int
| main (void)
| {
| 
| 	utrace((void *)0, 0);
| 
|   ;
|   return 0;
| }
configure:12183: result: no
configure:12188: checking whether utrace(2) with label is compilable
configure:12213: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat  conftest.c  >&5
conftest.c
conftest.c(42): fatal error C1083: Cannot open include file: 'sys/param.h': No such file or directory
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:12213: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| /* end confdefs.h.  */
| 
|   #include <sys/types.h>
|   #include <sys/param.h>
|   #include <sys/time.h>
|   #include <sys/uio.h>
|   #include <sys/ktrace.h>
| 
| int
| main (void)
| {
| 
| 	  utrace((void *)0, (void *)0, 0);
| 
|   ;
|   return 0;
| }
configure:12222: result: no
configure:12361: checking whether a program using __builtin_unreachable is compilable
configure:12386: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat  conftest.c  >&5
conftest.c
conftest.c(43): warning C4013: '__builtin_unreachable' undefined; assuming extern returning int
conftest.obj : error LNK2019: unresolved external symbol __builtin_unreachable referenced in function foo
conftest.exe : fatal error LNK1120: 1 unresolved externals
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:12386: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| /* end confdefs.h.  */
| 
| void foo (void) {
|   __builtin_unreachable();
| }
| 
| int
| main (void)
| {
| 
| 	{
| 		foo();
| 	}
| 
|   ;
|   return 0;
| }
configure:12395: result: no
configure:12407: checking whether a program using __builtin_ffsl is compilable
configure:12433: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat  conftest.c  >&5
conftest.c
conftest.c(52): warning C4013: '__builtin_ffsl' undefined; assuming extern returning int
conftest.obj : error LNK2019: unresolved external symbol __builtin_ffsl referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:12433: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| /* end confdefs.h.  */
| 
| #include <stdio.h>
| #include <strings.h>
| #include <string.h>
| 
| int
| main (void)
| {
| 
| 	{
| 		int rv = __builtin_ffsl(0x08);
| 		printf("%d\n", rv);
| 	}
| 
|   ;
|   return 0;
| }
configure:12442: result: no
configure:12454: checking whether a program using ffsl is compilable
configure:12480: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat  conftest.c  >&5
conftest.c
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:12480: $? = 0
configure:12489: result: yes
configure:12505: checking whether a program using __builtin_popcountl is compilable
configure:12531: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat  conftest.c  >&5
conftest.c
conftest.c(55): warning C4013: '__builtin_popcountl' undefined; assuming extern returning int
LINK : conftest.exe not found or not built by the last incremental link; performing full link
conftest.obj : error LNK2019: unresolved external symbol __builtin_popcountl referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:12531: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| #define JEMALLOC_INTERNAL_FFSLL ffsll
| #define JEMALLOC_INTERNAL_FFSL ffsl
| #define JEMALLOC_INTERNAL_FFS ffs
| /* end confdefs.h.  */
| 
| #include <stdio.h>
| #include <strings.h>
| #include <string.h>
| 
| int
| main (void)
| {
| 
| 	{
| 		int rv = __builtin_popcountl(0x08);
| 		printf("%d\n", rv);
| 	}
| 
|   ;
|   return 0;
| }
configure:12540: result: no
configure:12588: checking LG_PAGE
configure:12641: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat  conftest.c  >&5
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
conftest.c
conftest.c(73): warning C4996: 'fopen': This function or variable may be unsafe. Consider using fopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
configure:12641: $? = 0
configure:12641: ./conftest.exe
configure:12641: $? = 0
configure:12652: result: 12
configure:13087: checking for library containing clock_gettime
configure:13117: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat -D_REENTRANT  conftest.c  >&5
conftest.c
LINK : conftest.exe not found or not built by the last incremental link; performing full link
conftest.obj : error LNK2019: unresolved external symbol clock_gettime referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:13117: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| #define JEMALLOC_INTERNAL_FFSLL ffsll
| #define JEMALLOC_INTERNAL_FFSL ffsl
| #define JEMALLOC_INTERNAL_FFS ffs
| #define LG_PAGE 12
| #define LG_HUGEPAGE 21
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| char clock_gettime ();
| int
| main (void)
| {
| return clock_gettime ();
|   ;
|   return 0;
| }
configure:13117: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat -D_REENTRANT  conftest.c -lrt   >&5
conftest.c
conftest.obj : error LNK2019: unresolved external symbol clock_gettime referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-lrt'
configure:13117: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| #define JEMALLOC_INTERNAL_FFSLL ffsll
| #define JEMALLOC_INTERNAL_FFSL ffsl
| #define JEMALLOC_INTERNAL_FFS ffs
| #define LG_PAGE 12
| #define LG_HUGEPAGE 21
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| char clock_gettime ();
| int
| main (void)
| {
| return clock_gettime ();
|   ;
|   return 0;
| }
configure:13137: result: no
configure:13277: checking whether clock_gettime(CLOCK_MONOTONIC_COARSE, ...) is compilable
configure:13300: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat -D_REENTRANT  conftest.c  >&5
conftest.c
conftest.c(56): warning C4013: 'clock_gettime' undefined; assuming extern returning int
conftest.c(56): error C2065: 'CLOCK_MONOTONIC_COARSE': undeclared identifier
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:13300: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| #define JEMALLOC_INTERNAL_FFSLL ffsll
| #define JEMALLOC_INTERNAL_FFSL ffsl
| #define JEMALLOC_INTERNAL_FFS ffs
| #define LG_PAGE 12
| #define LG_HUGEPAGE 21
| /* end confdefs.h.  */
| 
| #include <time.h>
| 
| int
| main (void)
| {
| 
| 	struct timespec ts;
| 
| 	clock_gettime(CLOCK_MONOTONIC_COARSE, &ts);
| 
|   ;
|   return 0;
| }
configure:13309: result: no
configure:13318: checking whether clock_gettime(CLOCK_MONOTONIC, ...) is compilable
configure:13345: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat -D_REENTRANT  conftest.c  >&5
conftest.c
conftest.c(48): fatal error C1083: Cannot open include file: 'unistd.h': No such file or directory
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:13345: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| #define JEMALLOC_INTERNAL_FFSLL ffsll
| #define JEMALLOC_INTERNAL_FFSL ffsl
| #define JEMALLOC_INTERNAL_FFS ffs
| #define LG_PAGE 12
| #define LG_HUGEPAGE 21
| /* end confdefs.h.  */
| 
| #include <unistd.h>
| #include <time.h>
| 
| int
| main (void)
| {
| 
| 	struct timespec ts;
| 
| 	clock_gettime(CLOCK_MONOTONIC, &ts);
| #if !defined(_POSIX_MONOTONIC_CLOCK) || _POSIX_MONOTONIC_CLOCK < 0
| #  error _POSIX_MONOTONIC_CLOCK missing/invalid
| #endif
| 
|   ;
|   return 0;
| }
configure:13354: result: no
configure:13363: checking whether mach_absolute_time() is compilable
configure:13384: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat -D_REENTRANT  conftest.c  >&5
conftest.c
conftest.c(48): fatal error C1083: Cannot open include file: 'mach/mach_time.h': No such file or directory
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:13384: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| #define JEMALLOC_INTERNAL_FFSLL ffsll
| #define JEMALLOC_INTERNAL_FFSL ffsl
| #define JEMALLOC_INTERNAL_FFS ffs
| #define LG_PAGE 12
| #define LG_HUGEPAGE 21
| /* end confdefs.h.  */
| 
| #include <mach/mach_time.h>
| 
| int
| main (void)
| {
| 
| 	mach_absolute_time();
| 
|   ;
|   return 0;
| }
configure:13393: result: no
configure:13402: checking whether clock_gettime(CLOCK_REALTIME, ...) is compilable
configure:13425: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat -D_REENTRANT  conftest.c  >&5
conftest.c
conftest.c(56): warning C4013: 'clock_gettime' undefined; assuming extern returning int
conftest.c(56): error C2065: 'CLOCK_REALTIME': undeclared identifier
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:13425: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| #define JEMALLOC_INTERNAL_FFSLL ffsll
| #define JEMALLOC_INTERNAL_FFSL ffsl
| #define JEMALLOC_INTERNAL_FFS ffs
| #define LG_PAGE 12
| #define LG_HUGEPAGE 21
| /* end confdefs.h.  */
| 
| #include <time.h>
| 
| int
| main (void)
| {
| 
| 	struct timespec ts;
| 
| 	clock_gettime(CLOCK_REALTIME, &ts);
| 
|   ;
|   return 0;
| }
configure:13434: result: no
configure:13460: checking whether compiler supports -Werror
configure:13491: cl.exe -nologo -c -Zi -MT -W3 -FS -Werror -I./include/msvc_compat -D_REENTRANT conftest.c >&5
cl : Command line error D8021 : invalid numeric argument '/Werror'
configure:13491: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| #define JEMALLOC_INTERNAL_FFSLL ffsll
| #define JEMALLOC_INTERNAL_FFSL ffsl
| #define JEMALLOC_INTERNAL_FFS ffs
| #define LG_PAGE 12
| #define LG_HUGEPAGE 21
| /* end confdefs.h.  */
| 
| 
| int
| main (void)
| {
| 
|     return 0;
| 
|   ;
|   return 0;
| }
configure:13498: result: no
configure:13512: checking whether syscall(2) is compilable
configure:13534: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat -D_REENTRANT  conftest.c  >&5
conftest.c
conftest.c(48): fatal error C1083: Cannot open include file: 'sys/syscall.h': No such file or directory
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:13534: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| #define JEMALLOC_INTERNAL_FFSLL ffsll
| #define JEMALLOC_INTERNAL_FFSL ffsl
| #define JEMALLOC_INTERNAL_FFS ffs
| #define LG_PAGE 12
| #define LG_HUGEPAGE 21
| /* end confdefs.h.  */
| 
| #include <sys/syscall.h>
| #include <unistd.h>
| 
| int
| main (void)
| {
| 
| 	syscall(SYS_write, 2, "hello", 5);
| 
|   ;
|   return 0;
| }
configure:13543: result: no
configure:13560: checking for secure_getenv
configure:13560: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat -D_REENTRANT  conftest.c  >&5
conftest.c
conftest.obj : error LNK2019: unresolved external symbol secure_getenv referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:13560: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| #define JEMALLOC_INTERNAL_FFSLL ffsll
| #define JEMALLOC_INTERNAL_FFSL ffsl
| #define JEMALLOC_INTERNAL_FFS ffs
| #define LG_PAGE 12
| #define LG_HUGEPAGE 21
| /* end confdefs.h.  */
| /* Define secure_getenv to an innocuous variant, in case <limits.h> declares secure_getenv.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define secure_getenv innocuous_secure_getenv
| 
| /* System header to define __stub macros and hopefully few prototypes,
|    which can conflict with char secure_getenv (); below.  */
| 
| #include <limits.h>
| #undef secure_getenv
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char secure_getenv ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_secure_getenv || defined __stub___secure_getenv
| choke me
| #endif
| 
| int
| main (void)
| {
| return secure_getenv ();
|   ;
|   return 0;
| }
configure:13560: result: no
configure:13574: checking for sched_getcpu
configure:13574: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat -D_REENTRANT  conftest.c  >&5
conftest.c
conftest.obj : error LNK2019: unresolved external symbol sched_getcpu referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:13574: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| #define JEMALLOC_INTERNAL_FFSLL ffsll
| #define JEMALLOC_INTERNAL_FFSL ffsl
| #define JEMALLOC_INTERNAL_FFS ffs
| #define LG_PAGE 12
| #define LG_HUGEPAGE 21
| /* end confdefs.h.  */
| /* Define sched_getcpu to an innocuous variant, in case <limits.h> declares sched_getcpu.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define sched_getcpu innocuous_sched_getcpu
| 
| /* System header to define __stub macros and hopefully few prototypes,
|    which can conflict with char sched_getcpu (); below.  */
| 
| #include <limits.h>
| #undef sched_getcpu
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char sched_getcpu ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_sched_getcpu || defined __stub___sched_getcpu
| choke me
| #endif
| 
| int
| main (void)
| {
| return sched_getcpu ();
|   ;
|   return 0;
| }
configure:13574: result: no
configure:13588: checking for sched_setaffinity
configure:13588: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat -D_REENTRANT  conftest.c  >&5
conftest.c
conftest.obj : error LNK2019: unresolved external symbol sched_setaffinity referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:13588: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| #define JEMALLOC_INTERNAL_FFSLL ffsll
| #define JEMALLOC_INTERNAL_FFSL ffsl
| #define JEMALLOC_INTERNAL_FFS ffs
| #define LG_PAGE 12
| #define LG_HUGEPAGE 21
| /* end confdefs.h.  */
| /* Define sched_setaffinity to an innocuous variant, in case <limits.h> declares sched_setaffinity.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define sched_setaffinity innocuous_sched_setaffinity
| 
| /* System header to define __stub macros and hopefully few prototypes,
|    which can conflict with char sched_setaffinity (); below.  */
| 
| #include <limits.h>
| #undef sched_setaffinity
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char sched_setaffinity ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_sched_setaffinity || defined __stub___sched_setaffinity
| choke me
| #endif
| 
| int
| main (void)
| {
| return sched_setaffinity ();
|   ;
|   return 0;
| }
configure:13588: result: no
configure:13602: checking for issetugid
configure:13602: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat -D_REENTRANT  conftest.c  >&5
conftest.c
conftest.obj : error LNK2019: unresolved external symbol issetugid referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:13602: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| #define JEMALLOC_INTERNAL_FFSLL ffsll
| #define JEMALLOC_INTERNAL_FFSL ffsl
| #define JEMALLOC_INTERNAL_FFS ffs
| #define LG_PAGE 12
| #define LG_HUGEPAGE 21
| /* end confdefs.h.  */
| /* Define issetugid to an innocuous variant, in case <limits.h> declares issetugid.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define issetugid innocuous_issetugid
| 
| /* System header to define __stub macros and hopefully few prototypes,
|    which can conflict with char issetugid (); below.  */
| 
| #include <limits.h>
| #undef issetugid
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char issetugid ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_issetugid || defined __stub___issetugid
| choke me
| #endif
| 
| int
| main (void)
| {
| return issetugid ();
|   ;
|   return 0;
| }
configure:13602: result: no
configure:13616: checking for _malloc_thread_cleanup
configure:13616: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat -D_REENTRANT  conftest.c  >&5
conftest.c
conftest.obj : error LNK2019: unresolved external symbol _malloc_thread_cleanup referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:13616: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| #define JEMALLOC_INTERNAL_FFSLL ffsll
| #define JEMALLOC_INTERNAL_FFSL ffsl
| #define JEMALLOC_INTERNAL_FFS ffs
| #define LG_PAGE 12
| #define LG_HUGEPAGE 21
| /* end confdefs.h.  */
| /* Define _malloc_thread_cleanup to an innocuous variant, in case <limits.h> declares _malloc_thread_cleanup.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define _malloc_thread_cleanup innocuous__malloc_thread_cleanup
| 
| /* System header to define __stub macros and hopefully few prototypes,
|    which can conflict with char _malloc_thread_cleanup (); below.  */
| 
| #include <limits.h>
| #undef _malloc_thread_cleanup
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char _malloc_thread_cleanup ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub__malloc_thread_cleanup || defined __stub____malloc_thread_cleanup
| choke me
| #endif
| 
| int
| main (void)
| {
| return _malloc_thread_cleanup ();
|   ;
|   return 0;
| }
configure:13616: result: no
configure:13632: checking for _pthread_mutex_init_calloc_cb
configure:13632: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat -D_REENTRANT  conftest.c  >&5
conftest.c
conftest.obj : error LNK2019: unresolved external symbol _pthread_mutex_init_calloc_cb referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:13632: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| #define JEMALLOC_INTERNAL_FFSLL ffsll
| #define JEMALLOC_INTERNAL_FFSL ffsl
| #define JEMALLOC_INTERNAL_FFS ffs
| #define LG_PAGE 12
| #define LG_HUGEPAGE 21
| /* end confdefs.h.  */
| /* Define _pthread_mutex_init_calloc_cb to an innocuous variant, in case <limits.h> declares _pthread_mutex_init_calloc_cb.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define _pthread_mutex_init_calloc_cb innocuous__pthread_mutex_init_calloc_cb
| 
| /* System header to define __stub macros and hopefully few prototypes,
|    which can conflict with char _pthread_mutex_init_calloc_cb (); below.  */
| 
| #include <limits.h>
| #undef _pthread_mutex_init_calloc_cb
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char _pthread_mutex_init_calloc_cb ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub__pthread_mutex_init_calloc_cb || defined __stub____pthread_mutex_init_calloc_cb
| choke me
| #endif
| 
| int
| main (void)
| {
| return _pthread_mutex_init_calloc_cb ();
|   ;
|   return 0;
| }
configure:13632: result: no
configure:13647: checking for memcntl
configure:13647: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat -D_REENTRANT  conftest.c  >&5
conftest.c
conftest.obj : error LNK2019: unresolved external symbol memcntl referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:13647: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| #define JEMALLOC_INTERNAL_FFSLL ffsll
| #define JEMALLOC_INTERNAL_FFSL ffsl
| #define JEMALLOC_INTERNAL_FFS ffs
| #define LG_PAGE 12
| #define LG_HUGEPAGE 21
| /* end confdefs.h.  */
| /* Define memcntl to an innocuous variant, in case <limits.h> declares memcntl.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define memcntl innocuous_memcntl
| 
| /* System header to define __stub macros and hopefully few prototypes,
|    which can conflict with char memcntl (); below.  */
| 
| #include <limits.h>
| #undef memcntl
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char memcntl ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_memcntl || defined __stub___memcntl
| choke me
| #endif
| 
| int
| main (void)
| {
| return memcntl ();
|   ;
|   return 0;
| }
configure:13647: result: no
configure:13746: checking whether C11 atomics is compilable
configure:13776: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat -D_REENTRANT  conftest.c  >&5
conftest.c
conftest.c(52): fatal error C1189: #error:  Atomics not available
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:13776: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| #define JEMALLOC_INTERNAL_FFSLL ffsll
| #define JEMALLOC_INTERNAL_FFSL ffsl
| #define JEMALLOC_INTERNAL_FFS ffs
| #define LG_PAGE 12
| #define LG_HUGEPAGE 21
| /* end confdefs.h.  */
| 
| #include <stdint.h>
| #if (__STDC_VERSION__ >= 201112L) && !defined(__STDC_NO_ATOMICS__)
| #include <stdatomic.h>
| #else
| #error Atomics not available
| #endif
| 
| int
| main (void)
| {
| 
|     uint64_t *p = (uint64_t *)0;
|     uint64_t x = 1;
|     volatile atomic_uint_least64_t *a = (volatile atomic_uint_least64_t *)p;
|     uint64_t r = atomic_fetch_add(a, x) + x;
|     return r == 0;
| 
|   ;
|   return 0;
| }
configure:13785: result: no
configure:13795: checking whether GCC __atomic atomics is compilable
configure:13819: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat -D_REENTRANT  conftest.c  >&5
conftest.c
conftest.c(55): warning C4013: '__atomic_fetch_add' undefined; assuming extern returning int
conftest.c(55): error C2065: '__ATOMIC_RELAXED': undeclared identifier
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:13819: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| #define JEMALLOC_INTERNAL_FFSLL ffsll
| #define JEMALLOC_INTERNAL_FFSL ffsl
| #define JEMALLOC_INTERNAL_FFS ffs
| #define LG_PAGE 12
| #define LG_HUGEPAGE 21
| /* end confdefs.h.  */
| 
| 
| int
| main (void)
| {
| 
|     int x = 0;
|     int val = 1;
|     int y = __atomic_fetch_add(&x, val, __ATOMIC_RELAXED);
|     int after_add = x;
|     return after_add == 1;
| 
|   ;
|   return 0;
| }
configure:13828: result: no
configure:13880: checking whether GCC __sync atomics is compilable
configure:13903: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat -D_REENTRANT  conftest.c  >&5
conftest.c
conftest.c(54): warning C4013: '__sync_fetch_and_add' undefined; assuming extern returning int
conftest.obj : error LNK2019: unresolved external symbol __sync_fetch_and_add referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:13903: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| #define JEMALLOC_INTERNAL_FFSLL ffsll
| #define JEMALLOC_INTERNAL_FFSL ffsl
| #define JEMALLOC_INTERNAL_FFS ffs
| #define LG_PAGE 12
| #define LG_HUGEPAGE 21
| /* end confdefs.h.  */
| 
| 
| int
| main (void)
| {
| 
|     int x = 0;
|     int before_add = __sync_fetch_and_add(&x, 1);
|     int after_add = x;
|     return (before_add == 0) && (after_add == 1);
| 
|   ;
|   return 0;
| }
configure:13912: result: no
configure:13963: checking whether Darwin OSAtomic*() is compilable
configure:13994: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat -D_REENTRANT  conftest.c  >&5
conftest.c
conftest.c(48): fatal error C1083: Cannot open include file: 'libkern/OSAtomic.h': No such file or directory
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:13994: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| #define JEMALLOC_INTERNAL_FFSLL ffsll
| #define JEMALLOC_INTERNAL_FFSL ffsl
| #define JEMALLOC_INTERNAL_FFS ffs
| #define LG_PAGE 12
| #define LG_HUGEPAGE 21
| /* end confdefs.h.  */
| 
| #include <libkern/OSAtomic.h>
| #include <inttypes.h>
| 
| int
| main (void)
| {
| 
| 	{
| 		int32_t x32 = 0;
| 		volatile int32_t *x32p = &x32;
| 		OSAtomicAdd32(1, x32p);
| 	}
| 	{
| 		int64_t x64 = 0;
| 		volatile int64_t *x64p = &x64;
| 		OSAtomicAdd64(1, x64p);
| 	}
| 
|   ;
|   return 0;
| }
configure:14003: result: no
configure:14013: checking whether madvise(2) is compilable
configure:14034: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat -D_REENTRANT  conftest.c  >&5
conftest.c
conftest.c(48): fatal error C1083: Cannot open include file: 'sys/mman.h': No such file or directory
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:14034: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| #define JEMALLOC_INTERNAL_FFSLL ffsll
| #define JEMALLOC_INTERNAL_FFSL ffsl
| #define JEMALLOC_INTERNAL_FFS ffs
| #define LG_PAGE 12
| #define LG_HUGEPAGE 21
| /* end confdefs.h.  */
| 
| #include <sys/mman.h>
| 
| int
| main (void)
| {
| 
| 	madvise((void *)0, 0, 0);
| 
|   ;
|   return 0;
| }
configure:14043: result: no
configure:14265: checking whether posix_madvise is compilable
configure:14286: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat -D_REENTRANT  conftest.c  >&5
conftest.c
conftest.c(48): fatal error C1083: Cannot open include file: 'sys/mman.h': No such file or directory
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:14286: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| #define JEMALLOC_INTERNAL_FFSLL ffsll
| #define JEMALLOC_INTERNAL_FFSL ffsl
| #define JEMALLOC_INTERNAL_FFS ffs
| #define LG_PAGE 12
| #define LG_HUGEPAGE 21
| /* end confdefs.h.  */
| 
|   #include <sys/mman.h>
| 
| int
| main (void)
| {
| 
|     posix_madvise((void *)0, 0, 0);
| 
|   ;
|   return 0;
| }
configure:14295: result: no
configure:14344: checking for __builtin_clz
configure:14374: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat -D_REENTRANT  conftest.c  >&5
conftest.c
conftest.c(54): warning C4013: '__builtin_clz' undefined; assuming extern returning int
conftest.c(58): warning C4013: '__builtin_clzl' undefined; assuming extern returning int
conftest.c(62): warning C4013: '__builtin_clzll' undefined; assuming extern returning int
conftest.obj : error LNK2019: unresolved external symbol __builtin_clz referenced in function main
conftest.obj : error LNK2019: unresolved external symbol __builtin_clzl referenced in function main
conftest.obj : error LNK2019: unresolved external symbol __builtin_clzll referenced in function main
conftest.exe : fatal error LNK1120: 3 unresolved externals
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:14374: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| #define JEMALLOC_INTERNAL_FFSLL ffsll
| #define JEMALLOC_INTERNAL_FFSL ffsl
| #define JEMALLOC_INTERNAL_FFS ffs
| #define LG_PAGE 12
| #define LG_HUGEPAGE 21
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| 
|                                                 {
|                                                         unsigned x = 0;
|                                                         int y = __builtin_clz(x);
|                                                 }
|                                                 {
|                                                         unsigned long x = 0;
|                                                         int y = __builtin_clzl(x);
|                                                 }
|                                                 {
|                                                         unsigned long long x = 0;
|                                                         int y = __builtin_clzll(x);
|                                                 }
| 
|   ;
|   return 0;
| }
configure:14383: result: no
configure:14393: checking whether Darwin os_unfair_lock_*() is compilable
configure:14421: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat -D_REENTRANT  conftest.c  >&5
conftest.c
conftest.c(48): fatal error C1083: Cannot open include file: 'os/lock.h': No such file or directory
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:14421: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| #define JEMALLOC_INTERNAL_FFSLL ffsll
| #define JEMALLOC_INTERNAL_FFSL ffsl
| #define JEMALLOC_INTERNAL_FFS ffs
| #define LG_PAGE 12
| #define LG_HUGEPAGE 21
| /* end confdefs.h.  */
| 
| #include <os/lock.h>
| #include <AvailabilityMacros.h>
| 
| int
| main (void)
| {
| 
| 	#if MAC_OS_X_VERSION_MIN_REQUIRED < 101200
| 	#error "os_unfair_lock is not supported"
| 	#else
| 	os_unfair_lock lock = OS_UNFAIR_LOCK_INIT;
| 	os_unfair_lock_lock(&lock);
| 	os_unfair_lock_unlock(&lock);
| 	#endif
| 
|   ;
|   return 0;
| }
configure:14430: result: no
configure:14595: checking whether pthreads adaptive mutexes is compilable
configure:14619: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -I./include/msvc_compat -D_REENTRANT  conftest.c  >&5
conftest.c
conftest.c(49): fatal error C1083: Cannot open include file: 'pthread.h': No such file or directory
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
configure:14619: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| #define JEMALLOC_INTERNAL_FFSLL ffsll
| #define JEMALLOC_INTERNAL_FFSL ffsl
| #define JEMALLOC_INTERNAL_FFS ffs
| #define LG_PAGE 12
| #define LG_HUGEPAGE 21
| #define JEMALLOC_TLS_MODEL  
| /* end confdefs.h.  */
| 
| #include <pthread.h>
| 
| int
| main (void)
| {
| 
|   pthread_mutexattr_t attr;
|   pthread_mutexattr_init(&attr);
|   pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_ADAPTIVE_NP);
|   pthread_mutexattr_destroy(&attr);
| 
|   ;
|   return 0;
| }
configure:14628: result: no
configure:14639: checking whether compiler supports -D_GNU_SOURCE
configure:14670: cl.exe -nologo -c -Zi -MT -W3 -FS -D_GNU_SOURCE -I./include/msvc_compat -D_REENTRANT conftest.c >&5
conftest.c
configure:14670: $? = 0
configure:14673: result: yes
configure:14691: checking whether compiler supports -Werror
configure:14722: cl.exe -nologo -c -Zi -MT -W3 -FS -D_GNU_SOURCE -Werror -I./include/msvc_compat -D_REENTRANT conftest.c >&5
cl : Command line error D8021 : invalid numeric argument '/Werror'
configure:14722: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| #define JEMALLOC_INTERNAL_FFSLL ffsll
| #define JEMALLOC_INTERNAL_FFSL ffsl
| #define JEMALLOC_INTERNAL_FFS ffs
| #define LG_PAGE 12
| #define LG_HUGEPAGE 21
| #define JEMALLOC_TLS_MODEL  
| /* end confdefs.h.  */
| 
| 
| int
| main (void)
| {
| 
|     return 0;
| 
|   ;
|   return 0;
| }
configure:14729: result: no
configure:14743: checking whether compiler supports -herror_on_warning
configure:14774: cl.exe -nologo -c -Zi -MT -W3 -FS -D_GNU_SOURCE -herror_on_warning -I./include/msvc_compat -D_REENTRANT conftest.c >&5
conftest.c
cl : Command line warning D9002 : ignoring unknown option '-herror_on_warning'
configure:14774: $? = 0
configure:14777: result: yes
configure:14795: checking whether strerror_r returns char with gnu source is compilable
configure:14821: cl.exe -nologo -o conftest.exe -Zi -MT -W3 -FS -D_GNU_SOURCE -herror_on_warning -I./include/msvc_compat -D_REENTRANT  conftest.c  >&5
conftest.c
conftest.c(59): warning C4013: 'strerror_r' undefined; assuming extern returning int
conftest.c(59): warning C4047: 'initializing': 'char *' differs in levels of indirection from 'int'
conftest.obj : error LNK2019: unresolved external symbol strerror_r referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-herror_on_warning'
configure:14821: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| #define JEMALLOC_INTERNAL_FFSLL ffsll
| #define JEMALLOC_INTERNAL_FFSL ffsl
| #define JEMALLOC_INTERNAL_FFS ffs
| #define LG_PAGE 12
| #define LG_HUGEPAGE 21
| #define JEMALLOC_TLS_MODEL  
| /* end confdefs.h.  */
| 
| #include <errno.h>
| #include <stdio.h>
| #include <stdlib.h>
| #include <string.h>
| 
| int
| main (void)
| {
| 
|   char *buffer = (char *) malloc(100);
|   char *error = strerror_r(EINVAL, buffer, 100);
|   printf("%s\n", error);
| 
|   ;
|   return 0;
| }
configure:14830: result: no
configure:14846: checking for _Bool
configure:14846: cl.exe -nologo -c -Zi -MT -W3 -FS -I./include/msvc_compat -D_REENTRANT conftest.c >&5
conftest.c
configure:14846: $? = 0
configure:14846: cl.exe -nologo -c -Zi -MT -W3 -FS -I./include/msvc_compat -D_REENTRANT conftest.c >&5
conftest.c
conftest.c(79): error C2059: syntax error: ')'
configure:14846: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define STDC_HEADERS 1
| #define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT _mm_pause()
| #define LG_VADDR 48
| #define LG_VADDR 48
| #define HAVE_MALLOC_H 1
| #define JEMALLOC_USABLE_SIZE_CONST const
| #define JEMALLOC_PREFIX "je_"
| #define JEMALLOC_CPREFIX "JE_"
| #define JEMALLOC_PRIVATE_NAMESPACE je_
| #define JEMALLOC_CONFIG_MALLOC_CONF ""
| #define JEMALLOC_DEBUG  
| #define JEMALLOC_STATS  
| #define JEMALLOC_FILL  
| #define JEMALLOC_CACHE_OBLIVIOUS  
| #define JEMALLOC_INTERNAL_UNREACHABLE abort
| #define JEMALLOC_INTERNAL_FFSLL ffsll
| #define JEMALLOC_INTERNAL_FFSL ffsl
| #define JEMALLOC_INTERNAL_FFS ffs
| #define LG_PAGE 12
| #define LG_HUGEPAGE 21
| #define JEMALLOC_TLS_MODEL  
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main (void)
| {
| if (sizeof ((_Bool)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:14846: result: yes
configure:14855: checking for stdbool.h that conforms to C99
configure:14971: cl.exe -nologo -c -Zi -MT -W3 -FS -I./include/msvc_compat -D_REENTRANT conftest.c >&5
conftest.c
configure:14971: $? = 0
configure:14979: result: yes
configure:15128: creating ./config.status

## ---------------------- ##
## Running config.status. ##
## ---------------------- ##

This file was extended by config.status, which was
generated by GNU Autoconf 2.71.  Invocation command line was

  CONFIG_FILES    = 
  CONFIG_HEADERS  = 
  CONFIG_LINKS    = 
  CONFIG_COMMANDS = 
  $ ./config.status 

on DESKTOP-GD8DKTR

config.status:1007: creating Makefile
config.status:1007: creating jemalloc.pc
config.status:1007: creating doc/html.xsl
config.status:1007: creating doc/manpages.xsl
config.status:1007: creating doc/jemalloc.xml
config.status:1007: creating include/jemalloc/jemalloc_macros.h
config.status:1007: creating include/jemalloc/jemalloc_protos.h
config.status:1007: creating include/jemalloc/jemalloc_typedefs.h
config.status:1007: creating include/jemalloc/internal/jemalloc_preamble.h
config.status:1007: creating test/test.sh
config.status:1007: creating test/include/test/jemalloc_test.h
config.status:1007: creating config.stamp
config.status:1007: creating bin/jemalloc-config
config.status:1007: creating bin/jemalloc.sh
config.status:1007: creating bin/jeprof
config.status:1007: creating include/jemalloc/jemalloc_defs.h
config.status:1007: creating include/jemalloc/internal/jemalloc_internal_defs.h
config.status:1007: creating test/include/test/jemalloc_test_defs.h
config.status:1182: test/include/test/jemalloc_test_defs.h is unchanged
config.status:1196: executing include/jemalloc/internal/public_symbols.txt commands
config.status:1196: executing include/jemalloc/internal/private_symbols.awk commands
config.status:1196: executing include/jemalloc/internal/private_symbols_jet.awk commands
config.status:1196: executing include/jemalloc/internal/public_namespace.h commands
config.status:1196: executing include/jemalloc/internal/public_unnamespace.h commands
config.status:1196: executing include/jemalloc/jemalloc_protos_jet.h commands
config.status:1196: executing include/jemalloc/jemalloc_rename.h commands
config.status:1196: executing include/jemalloc/jemalloc_mangle.h commands
config.status:1196: executing include/jemalloc/jemalloc_mangle_jet.h commands
config.status:1196: executing include/jemalloc/jemalloc.h commands
configure:16425: result: ===============================================================================
configure:16427: result: jemalloc version   : 5.2.1-773-g8b24cb8fdf2bf210e243c1d676484a4ffa5c3f6c
configure:16429: result: library revision   : 2
configure:16431: result: 
configure:16433: result: CONFIG             : --enable-debug
configure:16435: result: CC                 : cl.exe -nologo
configure:16437: result: CONFIGURE_CFLAGS   : -Zi -MT -W3 -FS
configure:16439: result: SPECIFIED_CFLAGS   : 
configure:16441: result: EXTRA_CFLAGS       : 
configure:16443: result: CPPFLAGS           : -I./include/msvc_compat -D_REENTRANT
configure:16445: result: CXX                : cl.exe
configure:16447: result: CONFIGURE_CXXFLAGS : 
configure:16449: result: SPECIFIED_CXXFLAGS : 
configure:16451: result: EXTRA_CXXFLAGS     : 
configure:16453: result: LDFLAGS            : 
configure:16455: result: EXTRA_LDFLAGS      : -link -DEBUG
configure:16457: result: DSO_LDFLAGS        : -LD
configure:16459: result: LIBS               : 
configure:16461: result: RPATH_EXTRA        : 
configure:16463: result: 
configure:16465: result: XSLTPROC           : /usr/bin/xsltproc
configure:16467: result: XSLROOT            : 
configure:16469: result: 
configure:16471: result: PREFIX             : 
configure:16473: result: BINDIR             : /bin
configure:16475: result: DATADIR            : /share
configure:16477: result: INCLUDEDIR         : /include
configure:16479: result: LIBDIR             : /lib
configure:16481: result: MANDIR             : /share/man
configure:16483: result: 
configure:16485: result: srcroot            : 
configure:16487: result: abs_srcroot        : /c/Software/jemalloc/
configure:16489: result: objroot            : 
configure:16491: result: abs_objroot        : /c/Software/jemalloc/
configure:16493: result: 
configure:16495: result: JEMALLOC_PREFIX    : je_
configure:16497: result: JEMALLOC_PRIVATE_NAMESPACE
configure:16499: result:                    : je_
configure:16501: result: install_suffix     : 
configure:16503: result: malloc_conf        : 
configure:16505: result: documentation      : 1
configure:16507: result: shared libs        : 1
configure:16509: result: static libs        : 1
configure:16511: result: autogen            : 0
configure:16513: result: debug              : 1
configure:16515: result: stats              : 1
configure:16517: result: experimental_smallocx : 0
configure:16519: result: prof               : 0
configure:16521: result: prof-libunwind     : 0
configure:16523: result: prof-libgcc        : 0
configure:16525: result: prof-gcc           : 0
configure:16527: result: fill               : 1
configure:16529: result: utrace             : 0
configure:16531: result: xmalloc            : 0
configure:16533: result: log                : 0
configure:16535: result: lazy_lock          : 0
configure:16537: result: cache-oblivious    : 1
configure:16539: result: cxx                : 0
configure:16541: result: ===============================================================================

## ---------------- ##
## Cache variables. ##
## ---------------- ##

ac_cv_big_endian=0
ac_cv_build=x86_64-pc-mingw64
ac_cv_c_bigendian=no
ac_cv_c_compiler_gnu=no
ac_cv_cxx_compiler_gnu=no
ac_cv_env_CCC_set=
ac_cv_env_CCC_value=
ac_cv_env_CC_set=
ac_cv_env_CC_value=
ac_cv_env_CFLAGS_set=
ac_cv_env_CFLAGS_value=
ac_cv_env_CPPFLAGS_set=
ac_cv_env_CPPFLAGS_value=
ac_cv_env_CPP_set=
ac_cv_env_CPP_value=
ac_cv_env_CXXFLAGS_set=
ac_cv_env_CXXFLAGS_value=
ac_cv_env_CXX_set=
ac_cv_env_CXX_value=
ac_cv_env_LDFLAGS_set=
ac_cv_env_LDFLAGS_value=
ac_cv_env_LIBS_set=
ac_cv_env_LIBS_value=
ac_cv_env_build_alias_set=
ac_cv_env_build_alias_value=
ac_cv_env_host_alias_set=
ac_cv_env_host_alias_value=
ac_cv_env_target_alias_set=
ac_cv_env_target_alias_value=
ac_cv_exeext=.exe
ac_cv_func__malloc_thread_cleanup=no
ac_cv_func__pthread_mutex_init_calloc_cb=no
ac_cv_func_issetugid=no
ac_cv_func_memalign=no
ac_cv_func_memcntl=no
ac_cv_func_sbrk=no
ac_cv_func_sched_getcpu=no
ac_cv_func_sched_setaffinity=no
ac_cv_func_secure_getenv=no
ac_cv_func_valloc=no
ac_cv_header_inttypes_h=yes
ac_cv_header_malloc_h=yes
ac_cv_header_stdbool_h=yes
ac_cv_header_stdint_h=yes
ac_cv_header_stdio_h=yes
ac_cv_header_stdlib_h=yes
ac_cv_header_string_h=yes
ac_cv_header_strings_h=yes
ac_cv_header_sys_stat_h=yes
ac_cv_header_sys_types_h=yes
ac_cv_header_unistd_h=no
ac_cv_host=x86_64-pc-mingw64
ac_cv_objext=obj
ac_cv_path_AUTOCONF=/usr/bin/autoconf
ac_cv_path_LD=/mingw64/bin/ld
ac_cv_path_XSLTPROC=/usr/bin/xsltproc
ac_cv_path_install='/usr/bin/install -c'
ac_cv_prog_AWK=gawk
ac_cv_prog_CPP='cl.exe -nologo -E'
ac_cv_prog_ac_ct_AR=ar
ac_cv_prog_ac_ct_CC=cl.exe
ac_cv_prog_ac_ct_CXX=cl.exe
ac_cv_prog_ac_ct_NM=nm
ac_cv_prog_ac_ct_RANLIB=ranlib
ac_cv_prog_cc_c11=no
ac_cv_prog_cc_c89=no
ac_cv_prog_cc_c99=no
ac_cv_prog_cc_g=yes
ac_cv_prog_cxx_11=no
ac_cv_prog_cxx_g=yes
ac_cv_prog_cxx_stdcxx=
ac_cv_search_clock_gettime=no
ac_cv_search_log='none required'
ac_cv_sizeof_int=4
ac_cv_sizeof_intmax_t=8
ac_cv_sizeof_long=4
ac_cv_sizeof_long_long=8
ac_cv_type__Bool=yes
ax_cv_cxx_compile_cxx14__h_std_cpp14=no
ax_cv_cxx_compile_cxx14__h_std_cpp1y=no
ax_cv_cxx_compile_cxx14__std_cpp14=no
ax_cv_cxx_compile_cxx14__std_cpp1y=no
ax_cv_cxx_compile_cxx14_pstd_cpp14=no
ax_cv_cxx_compile_cxx14_pstd_cpp1y=no
ax_cv_cxx_compile_cxx17__h_std_cpp17=no
ax_cv_cxx_compile_cxx17__h_std_cpp1z=no
ax_cv_cxx_compile_cxx17__std_cpp17=no
ax_cv_cxx_compile_cxx17__std_cpp1z=no
ax_cv_cxx_compile_cxx17_pstd_cpp17=no
ax_cv_cxx_compile_cxx17_pstd_cpp1z=no
je_cv_alloc_size=no
je_cv_attribute=no
je_cv_builtin_clz=no
je_cv_c11_atomics=no
je_cv_cflags_added=-herror_on_warning
je_cv_clock_monotonic=no
je_cv_clock_monotonic_coarse=no
je_cv_clock_realtime=no
je_cv_cold=no
je_cv_cray=no
je_cv_cray_prgenv_wrapper=
je_cv_fallthrough=no
je_cv_format_arg=no
je_cv_format_gnu_printf=no
je_cv_format_printf=no
je_cv_function_ffsl=yes
je_cv_gcc_atomic_atomics=no
je_cv_gcc_builtin_ffsl=no
je_cv_gcc_builtin_popcountl=no
je_cv_gcc_builtin_unreachable=no
je_cv_gcc_sync_atomics=no
je_cv_lg_hugepage=21
je_cv_lg_page=12
je_cv_lg_vaddr=48
je_cv_mach_absolute_time=no
je_cv_madvise=no
je_cv_msvc=yes
je_cv_os_unfair_lock=no
je_cv_osatomic=no
je_cv_pause_msvc=yes
je_cv_posix_madvise=no
je_cv_pthread_mutex_adaptive_np=no
je_cv_strerror_r_returns_char_with_gnu_source=no
je_cv_syscall=no
je_cv_tls_model=no
je_cv_utrace=no
je_cv_utrace_label=no
je_cv_vm_make_tag=no

## ----------------- ##
## Output variables. ##
## ----------------- ##

AR='lib'
ARFLAGS='-nologo -out:'
AROUT='$@'
AUTOCONF='/usr/bin/autoconf'
AWK='gawk'
BINDIR='/bin'
CC='cl.exe -nologo'
CC_MM=''
CFLAGS='-Zi -MT -W3 -FS'
CONFIG='--enable-debug'
CONFIGURE_CFLAGS='-Zi -MT -W3 -FS'
CONFIGURE_CXXFLAGS=''
CPP='cl.exe -nologo -E'
CPPFLAGS='-I./include/msvc_compat -D_REENTRANT'
CTARGET='-Fo$@'
CXX='cl.exe'
CXXFLAGS='-g'
DATADIR='/share'
DEFS='-DHAVE_CONFIG_H'
DSO_LDFLAGS='-LD'
DUMP_SYMS='nm -a'
ECHO_C=''
ECHO_N='-n'
ECHO_T=''
EXEEXT='.exe'
EXTRA_CFLAGS=''
EXTRA_CXXFLAGS=''
EXTRA_LDFLAGS='-link -DEBUG'
HAVE_CXX14='0'
HAVE_CXX17='0'
INCLUDEDIR='/include'
INSTALL_DATA='${INSTALL} -m 644'
INSTALL_PROGRAM='${INSTALL}'
INSTALL_SCRIPT='${INSTALL}'
JEMALLOC_CPREFIX='JE_'
JEMALLOC_PREFIX='je_'
LD='/mingw64/bin/ld'
LDFLAGS=''
LDTARGET='-Fe$@'
LD_PRELOAD_VAR='LD_PRELOAD'
LIBDIR='/lib'
LIBOBJS=''
LIBS=''
LM=''
LTLIBOBJS=''
MANDIR='/share/man'
MKLIB=''
NM='nm'
OBJEXT='obj'
PACKAGE_BUGREPORT=''
PACKAGE_NAME=''
PACKAGE_STRING=''
PACKAGE_TARNAME=''
PACKAGE_URL=''
PACKAGE_VERSION=''
PATH_SEPARATOR=':'
PIC_CFLAGS=''
PREFIX=''
RANLIB='ranlib'
RPATH=''
RPATH_EXTRA=''
SHELL='/bin/sh'
SOREV='dll'
SPECIFIED_CFLAGS=''
SPECIFIED_CXXFLAGS=''
TEST_LD_MODE=''
XSLROOT=''
XSLTPROC='/usr/bin/xsltproc'
a='lib'
abi='pecoff'
abs_objroot='/c/Software/jemalloc/'
abs_srcroot='/c/Software/jemalloc/'
ac_ct_CC='cl.exe'
ac_ct_CXX='cl.exe'
bindir='${exec_prefix}/bin'
build='x86_64-pc-mingw64'
build_alias=''
build_cpu='x86_64'
build_os='mingw64'
build_vendor='pc'
cfghdrs_in='include/jemalloc/jemalloc_defs.h.in include/jemalloc/internal/jemalloc_internal_defs.h.in include/jemalloc/internal/private_symbols.sh include/jemalloc/internal/private_namespace.sh include/jemalloc/internal/public_namespace.sh include/jemalloc/internal/public_unnamespace.sh include/jemalloc/jemalloc_rename.sh include/jemalloc/jemalloc_mangle.sh include/jemalloc/jemalloc.sh test/include/test/jemalloc_test_defs.h.in'
cfghdrs_out='include/jemalloc/jemalloc_defs.h include/jemalloc/jemalloc.h include/jemalloc/internal/private_symbols.awk include/jemalloc/internal/private_symbols_jet.awk include/jemalloc/internal/public_symbols.txt include/jemalloc/internal/public_namespace.h include/jemalloc/internal/public_unnamespace.h include/jemalloc/jemalloc_protos_jet.h include/jemalloc/jemalloc_rename.h include/jemalloc/jemalloc_mangle.h include/jemalloc/jemalloc_mangle_jet.h include/jemalloc/internal/jemalloc_internal_defs.h test/include/test/jemalloc_test_defs.h'
cfgoutputs_in='Makefile.in jemalloc.pc.in doc/html.xsl.in doc/manpages.xsl.in doc/jemalloc.xml.in include/jemalloc/jemalloc_macros.h.in include/jemalloc/jemalloc_protos.h.in include/jemalloc/jemalloc_typedefs.h.in include/jemalloc/internal/jemalloc_preamble.h.in test/test.sh.in test/include/test/jemalloc_test.h.in'
cfgoutputs_out='Makefile jemalloc.pc doc/html.xsl doc/manpages.xsl doc/jemalloc.xml include/jemalloc/jemalloc_macros.h include/jemalloc/jemalloc_protos.h include/jemalloc/jemalloc_typedefs.h include/jemalloc/internal/jemalloc_preamble.h test/test.sh test/include/test/jemalloc_test.h'
datadir='${datarootdir}'
datarootdir='${prefix}/share'
docdir='${datarootdir}/doc/${PACKAGE}'
dvidir='${docdir}'
enable_autogen='0'
enable_cache_oblivious='1'
enable_cxx='0'
enable_debug='1'
enable_doc='1'
enable_experimental_smallocx='0'
enable_fill='1'
enable_initial_exec_tls='1'
enable_lazy_lock='0'
enable_log='0'
enable_opt_safety_checks='0'
enable_opt_size_checks='0'
enable_prof='0'
enable_readlinkat='0'
enable_shared='1'
enable_static='1'
enable_stats='1'
enable_tls='0'
enable_utrace='0'
enable_xmalloc='0'
enable_zone_allocator=''
exe='.exe'
exec_prefix=''
host='x86_64-pc-mingw64'
host_alias=''
host_cpu='x86_64'
host_os='mingw64'
host_vendor='pc'
htmldir='${docdir}'
importlib='lib'
includedir='${prefix}/include'
infodir='${datarootdir}/info'
install_suffix=''
je_='je_'
jemalloc_version='5.2.1-773-g8b24cb8fdf2bf210e243c1d676484a4ffa5c3f6c'
jemalloc_version_bugfix='1'
jemalloc_version_gid='8b24cb8fdf2bf210e243c1d676484a4ffa5c3f6c'
jemalloc_version_major='5'
jemalloc_version_minor='2'
jemalloc_version_nrev='773'
libdir='${exec_prefix}/lib'
libdl=''
libexecdir='${exec_prefix}/libexec'
libprefix=''
link_whole_archive='0'
localedir='${datarootdir}/locale'
localstatedir='${prefix}/var'
mandir='${datarootdir}/man'
o='obj'
objroot=''
oldincludedir='/usr/include'
pdfdir='${docdir}'
prefix=''
private_namespace='je_'
program_transform_name='s,x,x,'
psdir='${docdir}'
rev='2'
runstatedir='${localstatedir}/run'
sbindir='${exec_prefix}/sbin'
sharedstatedir='${prefix}/com'
so='dll'
srcroot=''
sysconfdir='${prefix}/etc'
target_alias=''

## ----------- ##
## confdefs.h. ##
## ----------- ##

/* confdefs.h */
#define PACKAGE_NAME ""
#define PACKAGE_TARNAME ""
#define PACKAGE_VERSION ""
#define PACKAGE_STRING ""
#define PACKAGE_BUGREPORT ""
#define PACKAGE_URL ""
#define HAVE_STDIO_H 1
#define HAVE_STDLIB_H 1
#define HAVE_STRING_H 1
#define HAVE_INTTYPES_H 1
#define HAVE_STDINT_H 1
#define HAVE_STRINGS_H 1
#define HAVE_SYS_STAT_H 1
#define HAVE_SYS_TYPES_H 1
#define STDC_HEADERS 1
#define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN
#define SIZEOF_INT 4
#define LG_SIZEOF_INT 2
#define SIZEOF_LONG 4
#define LG_SIZEOF_LONG 2
#define SIZEOF_LONG_LONG 8
#define LG_SIZEOF_LONG_LONG 3
#define SIZEOF_INTMAX_T 8
#define LG_SIZEOF_INTMAX_T 3
#define HAVE_CPU_SPINWAIT 1
#define CPU_SPINWAIT _mm_pause()
#define LG_VADDR 48
#define LG_VADDR 48
#define HAVE_MALLOC_H 1
#define JEMALLOC_USABLE_SIZE_CONST const
#define JEMALLOC_PREFIX "je_"
#define JEMALLOC_CPREFIX "JE_"
#define JEMALLOC_PRIVATE_NAMESPACE je_
#define JEMALLOC_CONFIG_MALLOC_CONF ""
#define JEMALLOC_DEBUG  
#define JEMALLOC_STATS  
#define JEMALLOC_FILL  
#define JEMALLOC_CACHE_OBLIVIOUS  
#define JEMALLOC_INTERNAL_UNREACHABLE abort
#define JEMALLOC_INTERNAL_FFSLL ffsll
#define JEMALLOC_INTERNAL_FFSL ffsl
#define JEMALLOC_INTERNAL_FFS ffs
#define LG_PAGE 12
#define LG_HUGEPAGE 21
#define JEMALLOC_TLS_MODEL  
#define HAVE__BOOL 1
#define HAVE_STDBOOL_H 1

configure: exit 0
